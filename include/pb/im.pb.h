// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_im_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_im_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_im_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_im_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_im_2eproto;
namespace im {
class Conversation;
class ConversationDefaultTypeInternal;
extern ConversationDefaultTypeInternal _Conversation_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_ExtraEntry_DoNotUse;
class Message_ExtraEntry_DoNotUseDefaultTypeInternal;
extern Message_ExtraEntry_DoNotUseDefaultTypeInternal _Message_ExtraEntry_DoNotUse_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class User_ProfileEntry_DoNotUse;
class User_ProfileEntry_DoNotUseDefaultTypeInternal;
extern User_ProfileEntry_DoNotUseDefaultTypeInternal _User_ProfileEntry_DoNotUse_default_instance_;
}  // namespace im
PROTOBUF_NAMESPACE_OPEN
template<> ::im::Conversation* Arena::CreateMaybeMessage<::im::Conversation>(Arena*);
template<> ::im::Message* Arena::CreateMaybeMessage<::im::Message>(Arena*);
template<> ::im::Message_ExtraEntry_DoNotUse* Arena::CreateMaybeMessage<::im::Message_ExtraEntry_DoNotUse>(Arena*);
template<> ::im::User* Arena::CreateMaybeMessage<::im::User>(Arena*);
template<> ::im::User_ProfileEntry_DoNotUse* Arena::CreateMaybeMessage<::im::User_ProfileEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace im {

enum ConvType : int {
  SINGLE = 0,
  GROUP = 1,
  SYSTEM = 2,
  ConvType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConvType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConvType_IsValid(int value);
constexpr ConvType ConvType_MIN = SINGLE;
constexpr ConvType ConvType_MAX = SYSTEM;
constexpr int ConvType_ARRAYSIZE = ConvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvType_descriptor();
template<typename T>
inline const std::string& ConvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConvType_descriptor(), enum_t_value);
}
inline bool ConvType_Parse(
    const std::string& name, ConvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConvType>(
    ConvType_descriptor(), name, value);
}
enum MsgType : int {
  TEXT = 0,
  IMAGE = 1,
  AUDIO = 2,
  VIDEO = 3,
  FILE = 4,
  EMOJI = 5,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = TEXT;
constexpr MsgType MsgType_MAX = EMOJI;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    const std::string& name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum MsgStatus : int {
  SENDING = 0,
  SENT = 1,
  DELIVERED = 2,
  READ = 3,
  FAILED = 4,
  MsgStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgStatus_IsValid(int value);
constexpr MsgStatus MsgStatus_MIN = SENDING;
constexpr MsgStatus MsgStatus_MAX = FAILED;
constexpr int MsgStatus_ARRAYSIZE = MsgStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgStatus_descriptor();
template<typename T>
inline const std::string& MsgStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgStatus_descriptor(), enum_t_value);
}
inline bool MsgStatus_Parse(
    const std::string& name, MsgStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgStatus>(
    MsgStatus_descriptor(), name, value);
}
// ===================================================================

class User_ProfileEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<User_ProfileEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<User_ProfileEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  User_ProfileEntry_DoNotUse();
  User_ProfileEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const User_ProfileEntry_DoNotUse& other);
  static const User_ProfileEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const User_ProfileEntry_DoNotUse*>(&_User_ProfileEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "im.User.ProfileEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "im.User.ProfileEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.User) */ {
 public:
  inline User() : User(nullptr) {};
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kProfileFieldNumber = 6,
    kUsernameFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // map<string, string> profile = 6;
  int profile_size() const;
  private:
  int _internal_profile_size() const;
  public:
  void clear_profile();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_profile() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_profile();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      profile() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_profile();

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // uint64 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:im.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      User_ProfileEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > profile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class Conversation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.Conversation) */ {
 public:
  inline Conversation() : Conversation(nullptr) {};
  virtual ~Conversation();

  Conversation(const Conversation& from);
  Conversation(Conversation&& from) noexcept
    : Conversation() {
    *this = ::std::move(from);
  }

  inline Conversation& operator=(const Conversation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conversation& operator=(Conversation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Conversation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conversation* internal_default_instance() {
    return reinterpret_cast<const Conversation*>(
               &_Conversation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Conversation& a, Conversation& b) {
    a.Swap(&b);
  }
  inline void Swap(Conversation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conversation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conversation* New() const final {
    return CreateMaybeMessage<Conversation>(nullptr);
  }

  Conversation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conversation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Conversation& from);
  void MergeFrom(const Conversation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conversation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.Conversation";
  }
  protected:
  explicit Conversation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 3,
    kConvIdFieldNumber = 1,
    kConvTypeFieldNumber = 2,
    kUnreadCountFieldNumber = 5,
    kLastMsgIdFieldNumber = 4,
    kCreatedAtFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
  };
  // repeated uint64 members = 3;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_members(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_members() const;
  void _internal_add_members(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_members();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 members(int index) const;
  void set_members(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_members(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_members();

  // uint64 conv_id = 1;
  void clear_conv_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 conv_id() const;
  void set_conv_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_conv_id() const;
  void _internal_set_conv_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .im.ConvType conv_type = 2;
  void clear_conv_type();
  ::im::ConvType conv_type() const;
  void set_conv_type(::im::ConvType value);
  private:
  ::im::ConvType _internal_conv_type() const;
  void _internal_set_conv_type(::im::ConvType value);
  public:

  // uint32 unread_count = 5;
  void clear_unread_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 unread_count() const;
  void set_unread_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unread_count() const;
  void _internal_set_unread_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 last_msg_id = 4;
  void clear_last_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_msg_id() const;
  void set_last_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_msg_id() const;
  void _internal_set_last_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 created_at = 6;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updated_at = 7;
  void clear_updated_at();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at() const;
  void set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_at() const;
  void _internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:im.Conversation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > members_;
  mutable std::atomic<int> _members_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 conv_id_;
  int conv_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unread_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_msg_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class Message_ExtraEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Message_ExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Message_ExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Message_ExtraEntry_DoNotUse();
  Message_ExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Message_ExtraEntry_DoNotUse& other);
  static const Message_ExtraEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Message_ExtraEntry_DoNotUse*>(&_Message_ExtraEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "im.Message.ExtraEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "im.Message.ExtraEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:im.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "im.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 8,
    kContentFieldNumber = 5,
    kMsgIdFieldNumber = 1,
    kConvIdFieldNumber = 2,
    kSenderIdFieldNumber = 3,
    kMsgTypeFieldNumber = 4,
    kStatusFieldNumber = 7,
    kTimestampFieldNumber = 6,
  };
  // map<string, string> extra = 8;
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extra();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extra();

  // string content = 5;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 msg_id = 1;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 conv_id = 2;
  void clear_conv_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 conv_id() const;
  void set_conv_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_conv_id() const;
  void _internal_set_conv_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sender_id = 3;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .im.MsgType msg_type = 4;
  void clear_msg_type();
  ::im::MsgType msg_type() const;
  void set_msg_type(::im::MsgType value);
  private:
  ::im::MsgType _internal_msg_type() const;
  void _internal_set_msg_type(::im::MsgType value);
  public:

  // .im.MsgStatus status = 7;
  void clear_status();
  ::im::MsgStatus status() const;
  void set_status(::im::MsgStatus value);
  private:
  ::im::MsgStatus _internal_status() const;
  void _internal_set_status(::im::MsgStatus value);
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:im.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Message_ExtraEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > extra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 conv_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_id_;
  int msg_type_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// User

// uint64 uid = 1;
inline void User::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::uid() const {
  // @@protoc_insertion_point(field_get:im.User.uid)
  return _internal_uid();
}
inline void User::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uid_ = value;
}
inline void User::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:im.User.uid)
}

// string username = 2;
inline void User::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::username() const {
  // @@protoc_insertion_point(field_get:im.User.username)
  return _internal_username();
}
inline void User::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:im.User.username)
}
inline std::string* User::mutable_username() {
  // @@protoc_insertion_point(field_mutable:im.User.username)
  return _internal_mutable_username();
}
inline const std::string& User::_internal_username() const {
  return username_.Get();
}
inline void User::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.User.username)
}
inline void User::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.User.username)
}
inline void User::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.User.username)
}
inline std::string* User::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:im.User.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.User.username)
}
inline std::string* User::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.User.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.User.username)
}

// map<string, string> profile = 6;
inline int User::_internal_profile_size() const {
  return profile_.size();
}
inline int User::profile_size() const {
  return _internal_profile_size();
}
inline void User::clear_profile() {
  profile_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
User::_internal_profile() const {
  return profile_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
User::profile() const {
  // @@protoc_insertion_point(field_map:im.User.profile)
  return _internal_profile();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
User::_internal_mutable_profile() {
  return profile_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
User::mutable_profile() {
  // @@protoc_insertion_point(field_mutable_map:im.User.profile)
  return _internal_mutable_profile();
}

// -------------------------------------------------------------------

// Conversation

// uint64 conv_id = 1;
inline void Conversation::clear_conv_id() {
  conv_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Conversation::_internal_conv_id() const {
  return conv_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Conversation::conv_id() const {
  // @@protoc_insertion_point(field_get:im.Conversation.conv_id)
  return _internal_conv_id();
}
inline void Conversation::_internal_set_conv_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  conv_id_ = value;
}
inline void Conversation::set_conv_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_conv_id(value);
  // @@protoc_insertion_point(field_set:im.Conversation.conv_id)
}

// .im.ConvType conv_type = 2;
inline void Conversation::clear_conv_type() {
  conv_type_ = 0;
}
inline ::im::ConvType Conversation::_internal_conv_type() const {
  return static_cast< ::im::ConvType >(conv_type_);
}
inline ::im::ConvType Conversation::conv_type() const {
  // @@protoc_insertion_point(field_get:im.Conversation.conv_type)
  return _internal_conv_type();
}
inline void Conversation::_internal_set_conv_type(::im::ConvType value) {
  
  conv_type_ = value;
}
inline void Conversation::set_conv_type(::im::ConvType value) {
  _internal_set_conv_type(value);
  // @@protoc_insertion_point(field_set:im.Conversation.conv_type)
}

// repeated uint64 members = 3;
inline int Conversation::_internal_members_size() const {
  return members_.size();
}
inline int Conversation::members_size() const {
  return _internal_members_size();
}
inline void Conversation::clear_members() {
  members_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Conversation::_internal_members(int index) const {
  return members_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Conversation::members(int index) const {
  // @@protoc_insertion_point(field_get:im.Conversation.members)
  return _internal_members(index);
}
inline void Conversation::set_members(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  members_.Set(index, value);
  // @@protoc_insertion_point(field_set:im.Conversation.members)
}
inline void Conversation::_internal_add_members(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  members_.Add(value);
}
inline void Conversation::add_members(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_members(value);
  // @@protoc_insertion_point(field_add:im.Conversation.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Conversation::_internal_members() const {
  return members_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Conversation::members() const {
  // @@protoc_insertion_point(field_list:im.Conversation.members)
  return _internal_members();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Conversation::_internal_mutable_members() {
  return &members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Conversation::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:im.Conversation.members)
  return _internal_mutable_members();
}

// uint64 last_msg_id = 4;
inline void Conversation::clear_last_msg_id() {
  last_msg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Conversation::_internal_last_msg_id() const {
  return last_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Conversation::last_msg_id() const {
  // @@protoc_insertion_point(field_get:im.Conversation.last_msg_id)
  return _internal_last_msg_id();
}
inline void Conversation::_internal_set_last_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_msg_id_ = value;
}
inline void Conversation::set_last_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_msg_id(value);
  // @@protoc_insertion_point(field_set:im.Conversation.last_msg_id)
}

// uint32 unread_count = 5;
inline void Conversation::clear_unread_count() {
  unread_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Conversation::_internal_unread_count() const {
  return unread_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Conversation::unread_count() const {
  // @@protoc_insertion_point(field_get:im.Conversation.unread_count)
  return _internal_unread_count();
}
inline void Conversation::_internal_set_unread_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unread_count_ = value;
}
inline void Conversation::set_unread_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unread_count(value);
  // @@protoc_insertion_point(field_set:im.Conversation.unread_count)
}

// int64 created_at = 6;
inline void Conversation::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Conversation::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Conversation::created_at() const {
  // @@protoc_insertion_point(field_get:im.Conversation.created_at)
  return _internal_created_at();
}
inline void Conversation::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void Conversation::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:im.Conversation.created_at)
}

// int64 updated_at = 7;
inline void Conversation::clear_updated_at() {
  updated_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Conversation::_internal_updated_at() const {
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Conversation::updated_at() const {
  // @@protoc_insertion_point(field_get:im.Conversation.updated_at)
  return _internal_updated_at();
}
inline void Conversation::_internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updated_at_ = value;
}
inline void Conversation::set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:im.Conversation.updated_at)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Message

// uint64 msg_id = 1;
inline void Message::clear_msg_id() {
  msg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::msg_id() const {
  // @@protoc_insertion_point(field_get:im.Message.msg_id)
  return _internal_msg_id();
}
inline void Message::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_id_ = value;
}
inline void Message::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:im.Message.msg_id)
}

// uint64 conv_id = 2;
inline void Message::clear_conv_id() {
  conv_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_conv_id() const {
  return conv_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::conv_id() const {
  // @@protoc_insertion_point(field_get:im.Message.conv_id)
  return _internal_conv_id();
}
inline void Message::_internal_set_conv_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  conv_id_ = value;
}
inline void Message::set_conv_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_conv_id(value);
  // @@protoc_insertion_point(field_set:im.Message.conv_id)
}

// uint64 sender_id = 3;
inline void Message::clear_sender_id() {
  sender_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::sender_id() const {
  // @@protoc_insertion_point(field_get:im.Message.sender_id)
  return _internal_sender_id();
}
inline void Message::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sender_id_ = value;
}
inline void Message::set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:im.Message.sender_id)
}

// .im.MsgType msg_type = 4;
inline void Message::clear_msg_type() {
  msg_type_ = 0;
}
inline ::im::MsgType Message::_internal_msg_type() const {
  return static_cast< ::im::MsgType >(msg_type_);
}
inline ::im::MsgType Message::msg_type() const {
  // @@protoc_insertion_point(field_get:im.Message.msg_type)
  return _internal_msg_type();
}
inline void Message::_internal_set_msg_type(::im::MsgType value) {
  
  msg_type_ = value;
}
inline void Message::set_msg_type(::im::MsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:im.Message.msg_type)
}

// string content = 5;
inline void Message::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:im.Message.content)
  return _internal_content();
}
inline void Message::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:im.Message.content)
}
inline std::string* Message::mutable_content() {
  // @@protoc_insertion_point(field_mutable:im.Message.content)
  return _internal_mutable_content();
}
inline const std::string& Message::_internal_content() const {
  return content_.Get();
}
inline void Message::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:im.Message.content)
}
inline void Message::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:im.Message.content)
}
inline void Message::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:im.Message.content)
}
inline std::string* Message::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:im.Message.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:im.Message.content)
}
inline std::string* Message::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:im.Message.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:im.Message.content)
}

// int64 timestamp = 6;
inline void Message::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message::timestamp() const {
  // @@protoc_insertion_point(field_get:im.Message.timestamp)
  return _internal_timestamp();
}
inline void Message::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Message::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:im.Message.timestamp)
}

// .im.MsgStatus status = 7;
inline void Message::clear_status() {
  status_ = 0;
}
inline ::im::MsgStatus Message::_internal_status() const {
  return static_cast< ::im::MsgStatus >(status_);
}
inline ::im::MsgStatus Message::status() const {
  // @@protoc_insertion_point(field_get:im.Message.status)
  return _internal_status();
}
inline void Message::_internal_set_status(::im::MsgStatus value) {
  
  status_ = value;
}
inline void Message::set_status(::im::MsgStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:im.Message.status)
}

// map<string, string> extra = 8;
inline int Message::_internal_extra_size() const {
  return extra_.size();
}
inline int Message::extra_size() const {
  return _internal_extra_size();
}
inline void Message::clear_extra() {
  extra_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Message::_internal_extra() const {
  return extra_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Message::extra() const {
  // @@protoc_insertion_point(field_map:im.Message.extra)
  return _internal_extra();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Message::_internal_mutable_extra() {
  return extra_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Message::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_map:im.Message.extra)
  return _internal_mutable_extra();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::im::ConvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::ConvType>() {
  return ::im::ConvType_descriptor();
}
template <> struct is_proto_enum< ::im::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::MsgType>() {
  return ::im::MsgType_descriptor();
}
template <> struct is_proto_enum< ::im::MsgStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::im::MsgStatus>() {
  return ::im::MsgStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_im_2eproto
