// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/LCModel.proto

#include "LCModel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace roc {
namespace im {
namespace sdk {
namespace net {
PROTOBUF_CONSTEXPR Conversation_ExtEntry_DoNotUse::Conversation_ExtEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Conversation_ExtEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Conversation_ExtEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Conversation_ExtEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Conversation_ExtEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Conversation_ExtEntry_DoNotUseDefaultTypeInternal _Conversation_ExtEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Conversation::Conversation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ext_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.convertsion_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConversationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConversationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConversationDefaultTypeInternal() {}
  union {
    Conversation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConversationDefaultTypeInternal _Conversation_default_instance_;
PROTOBUF_CONSTEXPR CmdMessage::CmdMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmd_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CmdMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CmdMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CmdMessageDefaultTypeInternal() {}
  union {
    CmdMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CmdMessageDefaultTypeInternal _CmdMessage_default_instance_;
PROTOBUF_CONSTEXPR ContentMessage_ExtEntry_DoNotUse::ContentMessage_ExtEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ContentMessage_ExtEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentMessage_ExtEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentMessage_ExtEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ContentMessage_ExtEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentMessage_ExtEntry_DoNotUseDefaultTypeInternal _ContentMessage_ExtEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ContentMessage::ContentMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ext_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.message_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.convertsion_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_type_)*/int64_t{0}
  , /*decltype(_impl_.index_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContentMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContentMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContentMessageDefaultTypeInternal() {}
  union {
    ContentMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentMessageDefaultTypeInternal _ContentMessage_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmdmessage_)*/nullptr
  , /*decltype(_impl_.contentmessage_)*/nullptr
  , /*decltype(_impl_.iscmd_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR ConversationMessages::ConversationMessages(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_arr_)*/{}
  , /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConversationMessagesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConversationMessagesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConversationMessagesDefaultTypeInternal() {}
  union {
    ConversationMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConversationMessagesDefaultTypeInternal _ConversationMessages_default_instance_;
PROTOBUF_CONSTEXPR FetchSingleLinkMessagesReq::FetchSingleLinkMessagesReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversation_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_index_)*/int64_t{0}
  , /*decltype(_impl_.to_index_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchSingleLinkMessagesReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchSingleLinkMessagesReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchSingleLinkMessagesReqDefaultTypeInternal() {}
  union {
    FetchSingleLinkMessagesReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchSingleLinkMessagesReqDefaultTypeInternal _FetchSingleLinkMessagesReq_default_instance_;
PROTOBUF_CONSTEXPR FetchSingleLinkMessagesResp::FetchSingleLinkMessagesResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversation_messages_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchSingleLinkMessagesRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchSingleLinkMessagesRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchSingleLinkMessagesRespDefaultTypeInternal() {}
  union {
    FetchSingleLinkMessagesResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchSingleLinkMessagesRespDefaultTypeInternal _FetchSingleLinkMessagesResp_default_instance_;
PROTOBUF_CONSTEXPR FetchMixedLinkMessagesReq::FetchMixedLinkMessagesReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversation_id_arr_)*/{}
  , /*decltype(_impl_.count_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchMixedLinkMessagesReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchMixedLinkMessagesReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchMixedLinkMessagesReqDefaultTypeInternal() {}
  union {
    FetchMixedLinkMessagesReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchMixedLinkMessagesReqDefaultTypeInternal _FetchMixedLinkMessagesReq_default_instance_;
PROTOBUF_CONSTEXPR FetchMixedLinkMessagesResp::FetchMixedLinkMessagesResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversation_messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchMixedLinkMessagesRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchMixedLinkMessagesRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchMixedLinkMessagesRespDefaultTypeInternal() {}
  union {
    FetchMixedLinkMessagesResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchMixedLinkMessagesRespDefaultTypeInternal _FetchMixedLinkMessagesResp_default_instance_;
PROTOBUF_CONSTEXPR SendBatchMessageReq::SendBatchMessageReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_arr_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendBatchMessageReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendBatchMessageReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendBatchMessageReqDefaultTypeInternal() {}
  union {
    SendBatchMessageReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendBatchMessageReqDefaultTypeInternal _SendBatchMessageReq_default_instance_;
PROTOBUF_CONSTEXPR SendBatchMessageResp::SendBatchMessageResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.send_message_response_arr_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendBatchMessageRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendBatchMessageRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendBatchMessageRespDefaultTypeInternal() {}
  union {
    SendBatchMessageResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendBatchMessageRespDefaultTypeInternal _SendBatchMessageResp_default_instance_;
PROTOBUF_CONSTEXPR PushMessages::PushMessages(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.push_message_arr_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PushMessagesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushMessagesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushMessagesDefaultTypeInternal() {}
  union {
    PushMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushMessagesDefaultTypeInternal _PushMessages_default_instance_;
PROTOBUF_CONSTEXPR RequestBody::RequestBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fetch_mixed_link_messages_request_)*/nullptr
  , /*decltype(_impl_.fetch_single_link_messages_request_)*/nullptr
  , /*decltype(_impl_.send_batch_messages_request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestBodyDefaultTypeInternal() {}
  union {
    RequestBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestBodyDefaultTypeInternal _RequestBody_default_instance_;
PROTOBUF_CONSTEXPR ResponseBody::ResponseBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fetch_mixed_link_messages_response_)*/nullptr
  , /*decltype(_impl_.fetch_single_link_messages_response_)*/nullptr
  , /*decltype(_impl_.send_batch_messages_response_)*/nullptr
  , /*decltype(_impl_.push_message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseBodyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseBodyDefaultTypeInternal() {}
  union {
    ResponseBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseBodyDefaultTypeInternal _ResponseBody_default_instance_;
}  // namespace net
}  // namespace sdk
}  // namespace im
}  // namespace roc
static ::_pb::Metadata file_level_metadata_pb_2fLCModel_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_pb_2fLCModel_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pb_2fLCModel_2eproto = nullptr;

const uint32_t TableStruct_pb_2fLCModel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation, _impl_.convertsion_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation, _impl_.ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::CmdMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::CmdMessage, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage_ExtEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage_ExtEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage, _impl_.message_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage, _impl_.ext_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage, _impl_.convertsion_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage, _impl_.message_type_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ContentMessage, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, _impl_.iscmd_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, _impl_.cmdmessage_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, _impl_.contentmessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ConversationMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ConversationMessages, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ConversationMessages, _impl_.message_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesReq, _impl_.conversation_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesReq, _impl_.from_index_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesReq, _impl_.to_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesResp, _impl_.conversation_messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchMixedLinkMessagesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchMixedLinkMessagesReq, _impl_.conversation_id_arr_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchMixedLinkMessagesReq, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchMixedLinkMessagesResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchMixedLinkMessagesResp, _impl_.conversation_messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::SendBatchMessageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::SendBatchMessageReq, _impl_.message_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::SendBatchMessageResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::SendBatchMessageResp, _impl_.send_message_response_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::PushMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::PushMessages, _impl_.push_message_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, _impl_.fetch_mixed_link_messages_request_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, _impl_.fetch_single_link_messages_request_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, _impl_.send_batch_messages_request_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, _impl_.response_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, _impl_.fetch_mixed_link_messages_response_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, _impl_.fetch_single_link_messages_response_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, _impl_.send_batch_messages_response_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, _impl_.push_message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::roc::im::sdk::net::Conversation)},
  { 19, -1, -1, sizeof(::roc::im::sdk::net::CmdMessage)},
  { 26, 34, -1, sizeof(::roc::im::sdk::net::ContentMessage_ExtEntry_DoNotUse)},
  { 36, -1, -1, sizeof(::roc::im::sdk::net::ContentMessage)},
  { 49, -1, -1, sizeof(::roc::im::sdk::net::Message)},
  { 58, -1, -1, sizeof(::roc::im::sdk::net::ConversationMessages)},
  { 66, -1, -1, sizeof(::roc::im::sdk::net::FetchSingleLinkMessagesReq)},
  { 75, -1, -1, sizeof(::roc::im::sdk::net::FetchSingleLinkMessagesResp)},
  { 82, -1, -1, sizeof(::roc::im::sdk::net::FetchMixedLinkMessagesReq)},
  { 90, -1, -1, sizeof(::roc::im::sdk::net::FetchMixedLinkMessagesResp)},
  { 97, -1, -1, sizeof(::roc::im::sdk::net::SendBatchMessageReq)},
  { 104, -1, -1, sizeof(::roc::im::sdk::net::SendBatchMessageResp)},
  { 111, -1, -1, sizeof(::roc::im::sdk::net::PushMessages)},
  { 118, -1, -1, sizeof(::roc::im::sdk::net::RequestBody)},
  { 129, -1, -1, sizeof(::roc::im::sdk::net::ResponseBody)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::roc::im::sdk::net::_Conversation_ExtEntry_DoNotUse_default_instance_._instance,
  &::roc::im::sdk::net::_Conversation_default_instance_._instance,
  &::roc::im::sdk::net::_CmdMessage_default_instance_._instance,
  &::roc::im::sdk::net::_ContentMessage_ExtEntry_DoNotUse_default_instance_._instance,
  &::roc::im::sdk::net::_ContentMessage_default_instance_._instance,
  &::roc::im::sdk::net::_Message_default_instance_._instance,
  &::roc::im::sdk::net::_ConversationMessages_default_instance_._instance,
  &::roc::im::sdk::net::_FetchSingleLinkMessagesReq_default_instance_._instance,
  &::roc::im::sdk::net::_FetchSingleLinkMessagesResp_default_instance_._instance,
  &::roc::im::sdk::net::_FetchMixedLinkMessagesReq_default_instance_._instance,
  &::roc::im::sdk::net::_FetchMixedLinkMessagesResp_default_instance_._instance,
  &::roc::im::sdk::net::_SendBatchMessageReq_default_instance_._instance,
  &::roc::im::sdk::net::_SendBatchMessageResp_default_instance_._instance,
  &::roc::im::sdk::net::_PushMessages_default_instance_._instance,
  &::roc::im::sdk::net::_RequestBody_default_instance_._instance,
  &::roc::im::sdk::net::_ResponseBody_default_instance_._instance,
};

const char descriptor_table_protodef_pb_2fLCModel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020pb/LCModel.proto\022\016roc.im.sdk.net\"\230\001\n\014C"
  "onversation\022\026\n\016convertsion_id\030\001 \001(\t\022\020\n\010o"
  "wner_id\030\002 \001(\t\0222\n\003ext\030\003 \003(\0132%.roc.im.sdk."
  "net.Conversation.ExtEntry\032*\n\010ExtEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\031\n\nCmdMess"
  "age\022\013\n\003cmd\030\001 \001(\003\"\347\001\n\016ContentMessage\022\022\n\nm"
  "essage_id\030\001 \001(\t\022\017\n\007content\030\002 \001(\014\0224\n\003ext\030"
  "\003 \003(\0132\'.roc.im.sdk.net.ContentMessage.Ex"
  "tEntry\022\021\n\tsender_id\030\004 \001(\t\022\026\n\016convertsion"
  "_id\030\005 \001(\t\022\024\n\014message_type\030\006 \001(\003\022\r\n\005index"
  "\030\007 \001(\003\032*\n\010ExtEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"\200\001\n\007Message\022\r\n\005isCmd\030\001 \001(\010\022.\n"
  "\ncmdMessage\030\002 \001(\0132\032.roc.im.sdk.net.CmdMe"
  "ssage\0226\n\016contentMessage\030\003 \001(\0132\036.roc.im.s"
  "dk.net.ContentMessage\"]\n\024ConversationMes"
  "sages\022\027\n\017conversation_id\030\001 \001(\t\022,\n\013messag"
  "e_arr\030\002 \003(\0132\027.roc.im.sdk.net.Message\"[\n\032"
  "FetchSingleLinkMessagesReq\022\027\n\017conversati"
  "on_id\030\001 \001(\t\022\022\n\nfrom_index\030\002 \001(\003\022\020\n\010to_in"
  "dex\030\003 \001(\003\"b\n\033FetchSingleLinkMessagesResp"
  "\022C\n\025conversation_messages\030\001 \001(\0132$.roc.im"
  ".sdk.net.ConversationMessages\"G\n\031FetchMi"
  "xedLinkMessagesReq\022\033\n\023conversation_id_ar"
  "r\030\001 \003(\t\022\r\n\005count\030\002 \001(\003\"a\n\032FetchMixedLink"
  "MessagesResp\022C\n\025conversation_messages\030\001 "
  "\003(\0132$.roc.im.sdk.net.ConversationMessage"
  "s\"J\n\023SendBatchMessageReq\0223\n\013message_arr\030"
  "\001 \003(\0132\036.roc.im.sdk.net.ContentMessage\"_\n"
  "\024SendBatchMessageResp\022G\n\031send_message_re"
  "sponse_arr\030\001 \003(\0132$.roc.im.sdk.net.SendBa"
  "tchMessageResp\"A\n\014PushMessages\0221\n\020push_m"
  "essage_arr\030\001 \003(\0132\027.roc.im.sdk.net.Messag"
  "e\"\246\002\n\013RequestBody\022\022\n\nrequest_id\030\001 \001(\t\022T\n"
  "!fetch_mixed_link_messages_request\030\002 \001(\013"
  "2).roc.im.sdk.net.FetchMixedLinkMessages"
  "Req\022V\n\"fetch_single_link_messages_reques"
  "t\030\003 \001(\0132*.roc.im.sdk.net.FetchSingleLink"
  "MessagesReq\022H\n\033send_batch_messages_reque"
  "st\030\004 \001(\0132#.roc.im.sdk.net.SendBatchMessa"
  "geReq\022\013\n\003url\030\005 \001(\t\"\325\002\n\014ResponseBody\022\023\n\013r"
  "esponse_id\030\001 \001(\t\022V\n\"fetch_mixed_link_mes"
  "sages_response\030\002 \001(\0132*.roc.im.sdk.net.Fe"
  "tchMixedLinkMessagesResp\022X\n#fetch_single"
  "_link_messages_response\030\003 \001(\0132+.roc.im.s"
  "dk.net.FetchSingleLinkMessagesResp\022J\n\034se"
  "nd_batch_messages_response\030\004 \001(\0132$.roc.i"
  "m.sdk.net.SendBatchMessageResp\0222\n\014push_m"
  "essage\030\005 \001(\0132\034.roc.im.sdk.net.PushMessag"
  "esB\025Z\005./;im\252\002\013IM.Protocolb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_pb_2fLCModel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pb_2fLCModel_2eproto = {
    false, false, 1953, descriptor_table_protodef_pb_2fLCModel_2eproto,
    "pb/LCModel.proto",
    &descriptor_table_pb_2fLCModel_2eproto_once, nullptr, 0, 16,
    schemas, file_default_instances, TableStruct_pb_2fLCModel_2eproto::offsets,
    file_level_metadata_pb_2fLCModel_2eproto, file_level_enum_descriptors_pb_2fLCModel_2eproto,
    file_level_service_descriptors_pb_2fLCModel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pb_2fLCModel_2eproto_getter() {
  return &descriptor_table_pb_2fLCModel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pb_2fLCModel_2eproto(&descriptor_table_pb_2fLCModel_2eproto);
namespace roc {
namespace im {
namespace sdk {
namespace net {

// ===================================================================

Conversation_ExtEntry_DoNotUse::Conversation_ExtEntry_DoNotUse() {}
Conversation_ExtEntry_DoNotUse::Conversation_ExtEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Conversation_ExtEntry_DoNotUse::MergeFrom(const Conversation_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Conversation_ExtEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[0]);
}

// ===================================================================

class Conversation::_Internal {
 public:
};

Conversation::Conversation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Conversation::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.Conversation)
}
Conversation::Conversation(const Conversation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Conversation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.ext_)*/{}
    , decltype(_impl_.convertsion_id_){}
    , decltype(_impl_.owner_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ext_.MergeFrom(from._impl_.ext_);
  _impl_.convertsion_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convertsion_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_convertsion_id().empty()) {
    _this->_impl_.convertsion_id_.Set(from._internal_convertsion_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_id().empty()) {
    _this->_impl_.owner_id_.Set(from._internal_owner_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.Conversation)
}

inline void Conversation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.ext_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.convertsion_id_){}
    , decltype(_impl_.owner_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.convertsion_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convertsion_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Conversation::~Conversation() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.Conversation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Conversation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ext_.Destruct();
  _impl_.ext_.~MapField();
  _impl_.convertsion_id_.Destroy();
  _impl_.owner_id_.Destroy();
}

void Conversation::ArenaDtor(void* object) {
  Conversation* _this = reinterpret_cast< Conversation* >(object);
  _this->_impl_.ext_.Destruct();
}
void Conversation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Conversation::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.Conversation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ext_.Clear();
  _impl_.convertsion_id_.ClearToEmpty();
  _impl_.owner_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conversation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string convertsion_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_convertsion_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.Conversation.convertsion_id"));
        } else
          goto handle_unusual;
        continue;
      // string owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.Conversation.owner_id"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> ext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.ext_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Conversation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.Conversation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string convertsion_id = 1;
  if (!this->_internal_convertsion_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_convertsion_id().data(), static_cast<int>(this->_internal_convertsion_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.Conversation.convertsion_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_convertsion_id(), target);
  }

  // string owner_id = 2;
  if (!this->_internal_owner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.Conversation.owner_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_id(), target);
  }

  // map<string, string> ext = 3;
  if (!this->_internal_ext().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Conversation_ExtEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_ext();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "roc.im.sdk.net.Conversation.ExtEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "roc.im.sdk.net.Conversation.ExtEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.Conversation)
  return target;
}

size_t Conversation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.Conversation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> ext = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ext_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_ext().begin();
      it != this->_internal_ext().end(); ++it) {
    total_size += Conversation_ExtEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string convertsion_id = 1;
  if (!this->_internal_convertsion_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_convertsion_id());
  }

  // string owner_id = 2;
  if (!this->_internal_owner_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Conversation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Conversation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Conversation::GetClassData() const { return &_class_data_; }


void Conversation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Conversation*>(&to_msg);
  auto& from = static_cast<const Conversation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.Conversation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ext_.MergeFrom(from._impl_.ext_);
  if (!from._internal_convertsion_id().empty()) {
    _this->_internal_set_convertsion_id(from._internal_convertsion_id());
  }
  if (!from._internal_owner_id().empty()) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Conversation::CopyFrom(const Conversation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.Conversation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conversation::IsInitialized() const {
  return true;
}

void Conversation::InternalSwap(Conversation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ext_.InternalSwap(&other->_impl_.ext_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.convertsion_id_, lhs_arena,
      &other->_impl_.convertsion_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_id_, lhs_arena,
      &other->_impl_.owner_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Conversation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[1]);
}

// ===================================================================

class CmdMessage::_Internal {
 public:
};

CmdMessage::CmdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.CmdMessage)
}
CmdMessage::CmdMessage(const CmdMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CmdMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.CmdMessage)
}

inline void CmdMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmd_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CmdMessage::~CmdMessage() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.CmdMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CmdMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CmdMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CmdMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.CmdMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmd_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CmdMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.CmdMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.CmdMessage)
  return target;
}

size_t CmdMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.CmdMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CmdMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CmdMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CmdMessage::GetClassData() const { return &_class_data_; }


void CmdMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CmdMessage*>(&to_msg);
  auto& from = static_cast<const CmdMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.CmdMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cmd() != 0) {
    _this->_internal_set_cmd(from._internal_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CmdMessage::CopyFrom(const CmdMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.CmdMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdMessage::IsInitialized() const {
  return true;
}

void CmdMessage::InternalSwap(CmdMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[2]);
}

// ===================================================================

ContentMessage_ExtEntry_DoNotUse::ContentMessage_ExtEntry_DoNotUse() {}
ContentMessage_ExtEntry_DoNotUse::ContentMessage_ExtEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContentMessage_ExtEntry_DoNotUse::MergeFrom(const ContentMessage_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContentMessage_ExtEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[3]);
}

// ===================================================================

class ContentMessage::_Internal {
 public:
};

ContentMessage::ContentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ContentMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.ContentMessage)
}
ContentMessage::ContentMessage(const ContentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContentMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.ext_)*/{}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.convertsion_id_){}
    , decltype(_impl_.message_type_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ext_.MergeFrom(from._impl_.ext_);
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    _this->_impl_.message_id_.Set(from._internal_message_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id().empty()) {
    _this->_impl_.sender_id_.Set(from._internal_sender_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.convertsion_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convertsion_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_convertsion_id().empty()) {
    _this->_impl_.convertsion_id_.Set(from._internal_convertsion_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.message_type_, &from._impl_.message_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.message_type_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.ContentMessage)
}

inline void ContentMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.ext_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.message_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.convertsion_id_){}
    , decltype(_impl_.message_type_){int64_t{0}}
    , decltype(_impl_.index_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.convertsion_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convertsion_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContentMessage::~ContentMessage() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.ContentMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ContentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ext_.Destruct();
  _impl_.ext_.~MapField();
  _impl_.message_id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.sender_id_.Destroy();
  _impl_.convertsion_id_.Destroy();
}

void ContentMessage::ArenaDtor(void* object) {
  ContentMessage* _this = reinterpret_cast< ContentMessage* >(object);
  _this->_impl_.ext_.Destruct();
}
void ContentMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.ContentMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ext_.Clear();
  _impl_.message_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.sender_id_.ClearToEmpty();
  _impl_.convertsion_id_.ClearToEmpty();
  ::memset(&_impl_.message_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.message_type_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.ContentMessage.message_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> ext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.ext_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string sender_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.ContentMessage.sender_id"));
        } else
          goto handle_unusual;
        continue;
      // string convertsion_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_convertsion_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.ContentMessage.convertsion_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 message_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.message_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.ContentMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.ContentMessage.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  // map<string, string> ext = 3;
  if (!this->_internal_ext().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ContentMessage_ExtEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_ext();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "roc.im.sdk.net.ContentMessage.ExtEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "roc.im.sdk.net.ContentMessage.ExtEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string sender_id = 4;
  if (!this->_internal_sender_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_id().data(), static_cast<int>(this->_internal_sender_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.ContentMessage.sender_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_id(), target);
  }

  // string convertsion_id = 5;
  if (!this->_internal_convertsion_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_convertsion_id().data(), static_cast<int>(this->_internal_convertsion_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.ContentMessage.convertsion_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_convertsion_id(), target);
  }

  // int64 message_type = 6;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_message_type(), target);
  }

  // int64 index = 7;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.ContentMessage)
  return target;
}

size_t ContentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.ContentMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> ext = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ext_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_ext().begin();
      it != this->_internal_ext().end(); ++it) {
    total_size += ContentMessage_ExtEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // string sender_id = 4;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_id());
  }

  // string convertsion_id = 5;
  if (!this->_internal_convertsion_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_convertsion_id());
  }

  // int64 message_type = 6;
  if (this->_internal_message_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_message_type());
  }

  // int64 index = 7;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContentMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentMessage::GetClassData() const { return &_class_data_; }


void ContentMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContentMessage*>(&to_msg);
  auto& from = static_cast<const ContentMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.ContentMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ext_.MergeFrom(from._impl_.ext_);
  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_sender_id().empty()) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_convertsion_id().empty()) {
    _this->_internal_set_convertsion_id(from._internal_convertsion_id());
  }
  if (from._internal_message_type() != 0) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentMessage::CopyFrom(const ContentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.ContentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentMessage::IsInitialized() const {
  return true;
}

void ContentMessage::InternalSwap(ContentMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ext_.InternalSwap(&other->_impl_.ext_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_id_, lhs_arena,
      &other->_impl_.message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_id_, lhs_arena,
      &other->_impl_.sender_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.convertsion_id_, lhs_arena,
      &other->_impl_.convertsion_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentMessage, _impl_.index_)
      + sizeof(ContentMessage::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ContentMessage, _impl_.message_type_)>(
          reinterpret_cast<char*>(&_impl_.message_type_),
          reinterpret_cast<char*>(&other->_impl_.message_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[4]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::roc::im::sdk::net::CmdMessage& cmdmessage(const Message* msg);
  static const ::roc::im::sdk::net::ContentMessage& contentmessage(const Message* msg);
};

const ::roc::im::sdk::net::CmdMessage&
Message::_Internal::cmdmessage(const Message* msg) {
  return *msg->_impl_.cmdmessage_;
}
const ::roc::im::sdk::net::ContentMessage&
Message::_Internal::contentmessage(const Message* msg) {
  return *msg->_impl_.contentmessage_;
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmdmessage_){nullptr}
    , decltype(_impl_.contentmessage_){nullptr}
    , decltype(_impl_.iscmd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cmdmessage()) {
    _this->_impl_.cmdmessage_ = new ::roc::im::sdk::net::CmdMessage(*from._impl_.cmdmessage_);
  }
  if (from._internal_has_contentmessage()) {
    _this->_impl_.contentmessage_ = new ::roc::im::sdk::net::ContentMessage(*from._impl_.contentmessage_);
  }
  _this->_impl_.iscmd_ = from._impl_.iscmd_;
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmdmessage_){nullptr}
    , decltype(_impl_.contentmessage_){nullptr}
    , decltype(_impl_.iscmd_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cmdmessage_;
  if (this != internal_default_instance()) delete _impl_.contentmessage_;
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cmdmessage_ != nullptr) {
    delete _impl_.cmdmessage_;
  }
  _impl_.cmdmessage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.contentmessage_ != nullptr) {
    delete _impl_.contentmessage_;
  }
  _impl_.contentmessage_ = nullptr;
  _impl_.iscmd_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isCmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.iscmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .roc.im.sdk.net.CmdMessage cmdMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmdmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .roc.im.sdk.net.ContentMessage contentMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_contentmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isCmd = 1;
  if (this->_internal_iscmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_iscmd(), target);
  }

  // .roc.im.sdk.net.CmdMessage cmdMessage = 2;
  if (this->_internal_has_cmdmessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cmdmessage(this),
        _Internal::cmdmessage(this).GetCachedSize(), target, stream);
  }

  // .roc.im.sdk.net.ContentMessage contentMessage = 3;
  if (this->_internal_has_contentmessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::contentmessage(this),
        _Internal::contentmessage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .roc.im.sdk.net.CmdMessage cmdMessage = 2;
  if (this->_internal_has_cmdmessage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cmdmessage_);
  }

  // .roc.im.sdk.net.ContentMessage contentMessage = 3;
  if (this->_internal_has_contentmessage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contentmessage_);
  }

  // bool isCmd = 1;
  if (this->_internal_iscmd() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cmdmessage()) {
    _this->_internal_mutable_cmdmessage()->::roc::im::sdk::net::CmdMessage::MergeFrom(
        from._internal_cmdmessage());
  }
  if (from._internal_has_contentmessage()) {
    _this->_internal_mutable_contentmessage()->::roc::im::sdk::net::ContentMessage::MergeFrom(
        from._internal_contentmessage());
  }
  if (from._internal_iscmd() != 0) {
    _this->_internal_set_iscmd(from._internal_iscmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.iscmd_)
      + sizeof(Message::_impl_.iscmd_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.cmdmessage_)>(
          reinterpret_cast<char*>(&_impl_.cmdmessage_),
          reinterpret_cast<char*>(&other->_impl_.cmdmessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[5]);
}

// ===================================================================

class ConversationMessages::_Internal {
 public:
};

ConversationMessages::ConversationMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.ConversationMessages)
}
ConversationMessages::ConversationMessages(const ConversationMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConversationMessages* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_arr_){from._impl_.message_arr_}
    , decltype(_impl_.conversation_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.ConversationMessages)
}

inline void ConversationMessages::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_arr_){arena}
    , decltype(_impl_.conversation_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConversationMessages::~ConversationMessages() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.ConversationMessages)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConversationMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_arr_.~RepeatedPtrField();
  _impl_.conversation_id_.Destroy();
}

void ConversationMessages::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConversationMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.ConversationMessages)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_arr_.Clear();
  _impl_.conversation_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConversationMessages::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.ConversationMessages.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .roc.im.sdk.net.Message message_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConversationMessages::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.ConversationMessages)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.ConversationMessages.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // repeated .roc.im.sdk.net.Message message_arr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_message_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_message_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.ConversationMessages)
  return target;
}

size_t ConversationMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.ConversationMessages)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.Message message_arr = 2;
  total_size += 1UL * this->_internal_message_arr_size();
  for (const auto& msg : this->_impl_.message_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConversationMessages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConversationMessages::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConversationMessages::GetClassData() const { return &_class_data_; }


void ConversationMessages::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConversationMessages*>(&to_msg);
  auto& from = static_cast<const ConversationMessages&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.ConversationMessages)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.message_arr_.MergeFrom(from._impl_.message_arr_);
  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConversationMessages::CopyFrom(const ConversationMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.ConversationMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConversationMessages::IsInitialized() const {
  return true;
}

void ConversationMessages::InternalSwap(ConversationMessages* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.message_arr_.InternalSwap(&other->_impl_.message_arr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConversationMessages::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[6]);
}

// ===================================================================

class FetchSingleLinkMessagesReq::_Internal {
 public:
};

FetchSingleLinkMessagesReq::FetchSingleLinkMessagesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.FetchSingleLinkMessagesReq)
}
FetchSingleLinkMessagesReq::FetchSingleLinkMessagesReq(const FetchSingleLinkMessagesReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchSingleLinkMessagesReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.from_index_){}
    , decltype(_impl_.to_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.from_index_, &from._impl_.from_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_index_) -
    reinterpret_cast<char*>(&_impl_.from_index_)) + sizeof(_impl_.to_index_));
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.FetchSingleLinkMessagesReq)
}

inline void FetchSingleLinkMessagesReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_){}
    , decltype(_impl_.from_index_){int64_t{0}}
    , decltype(_impl_.to_index_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FetchSingleLinkMessagesReq::~FetchSingleLinkMessagesReq() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchSingleLinkMessagesReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_id_.Destroy();
}

void FetchSingleLinkMessagesReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchSingleLinkMessagesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversation_id_.ClearToEmpty();
  ::memset(&_impl_.from_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.to_index_) -
      reinterpret_cast<char*>(&_impl_.from_index_)) + sizeof(_impl_.to_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchSingleLinkMessagesReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 from_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.from_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 to_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchSingleLinkMessagesReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // int64 from_index = 2;
  if (this->_internal_from_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_from_index(), target);
  }

  // int64 to_index = 3;
  if (this->_internal_to_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_to_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  return target;
}

size_t FetchSingleLinkMessagesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // int64 from_index = 2;
  if (this->_internal_from_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_from_index());
  }

  // int64 to_index = 3;
  if (this->_internal_to_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_to_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchSingleLinkMessagesReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchSingleLinkMessagesReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchSingleLinkMessagesReq::GetClassData() const { return &_class_data_; }


void FetchSingleLinkMessagesReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchSingleLinkMessagesReq*>(&to_msg);
  auto& from = static_cast<const FetchSingleLinkMessagesReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  if (from._internal_from_index() != 0) {
    _this->_internal_set_from_index(from._internal_from_index());
  }
  if (from._internal_to_index() != 0) {
    _this->_internal_set_to_index(from._internal_to_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchSingleLinkMessagesReq::CopyFrom(const FetchSingleLinkMessagesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSingleLinkMessagesReq::IsInitialized() const {
  return true;
}

void FetchSingleLinkMessagesReq::InternalSwap(FetchSingleLinkMessagesReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.conversation_id_, lhs_arena,
      &other->_impl_.conversation_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchSingleLinkMessagesReq, _impl_.to_index_)
      + sizeof(FetchSingleLinkMessagesReq::_impl_.to_index_)
      - PROTOBUF_FIELD_OFFSET(FetchSingleLinkMessagesReq, _impl_.from_index_)>(
          reinterpret_cast<char*>(&_impl_.from_index_),
          reinterpret_cast<char*>(&other->_impl_.from_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchSingleLinkMessagesReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[7]);
}

// ===================================================================

class FetchSingleLinkMessagesResp::_Internal {
 public:
  static const ::roc::im::sdk::net::ConversationMessages& conversation_messages(const FetchSingleLinkMessagesResp* msg);
};

const ::roc::im::sdk::net::ConversationMessages&
FetchSingleLinkMessagesResp::_Internal::conversation_messages(const FetchSingleLinkMessagesResp* msg) {
  return *msg->_impl_.conversation_messages_;
}
FetchSingleLinkMessagesResp::FetchSingleLinkMessagesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.FetchSingleLinkMessagesResp)
}
FetchSingleLinkMessagesResp::FetchSingleLinkMessagesResp(const FetchSingleLinkMessagesResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchSingleLinkMessagesResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_messages_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conversation_messages()) {
    _this->_impl_.conversation_messages_ = new ::roc::im::sdk::net::ConversationMessages(*from._impl_.conversation_messages_);
  }
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.FetchSingleLinkMessagesResp)
}

inline void FetchSingleLinkMessagesResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_messages_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FetchSingleLinkMessagesResp::~FetchSingleLinkMessagesResp() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchSingleLinkMessagesResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.conversation_messages_;
}

void FetchSingleLinkMessagesResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchSingleLinkMessagesResp::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.conversation_messages_ != nullptr) {
    delete _impl_.conversation_messages_;
  }
  _impl_.conversation_messages_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchSingleLinkMessagesResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation_messages(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchSingleLinkMessagesResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  if (this->_internal_has_conversation_messages()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::conversation_messages(this),
        _Internal::conversation_messages(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  return target;
}

size_t FetchSingleLinkMessagesResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  if (this->_internal_has_conversation_messages()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conversation_messages_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchSingleLinkMessagesResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchSingleLinkMessagesResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchSingleLinkMessagesResp::GetClassData() const { return &_class_data_; }


void FetchSingleLinkMessagesResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchSingleLinkMessagesResp*>(&to_msg);
  auto& from = static_cast<const FetchSingleLinkMessagesResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_conversation_messages()) {
    _this->_internal_mutable_conversation_messages()->::roc::im::sdk::net::ConversationMessages::MergeFrom(
        from._internal_conversation_messages());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchSingleLinkMessagesResp::CopyFrom(const FetchSingleLinkMessagesResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSingleLinkMessagesResp::IsInitialized() const {
  return true;
}

void FetchSingleLinkMessagesResp::InternalSwap(FetchSingleLinkMessagesResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.conversation_messages_, other->_impl_.conversation_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchSingleLinkMessagesResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[8]);
}

// ===================================================================

class FetchMixedLinkMessagesReq::_Internal {
 public:
};

FetchMixedLinkMessagesReq::FetchMixedLinkMessagesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.FetchMixedLinkMessagesReq)
}
FetchMixedLinkMessagesReq::FetchMixedLinkMessagesReq(const FetchMixedLinkMessagesReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchMixedLinkMessagesReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_arr_){from._impl_.conversation_id_arr_}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.FetchMixedLinkMessagesReq)
}

inline void FetchMixedLinkMessagesReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_arr_){arena}
    , decltype(_impl_.count_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FetchMixedLinkMessagesReq::~FetchMixedLinkMessagesReq() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchMixedLinkMessagesReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_id_arr_.~RepeatedPtrField();
}

void FetchMixedLinkMessagesReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchMixedLinkMessagesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversation_id_arr_.Clear();
  _impl_.count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchMixedLinkMessagesReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string conversation_id_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_conversation_id_arr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchMixedLinkMessagesReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string conversation_id_arr = 1;
  for (int i = 0, n = this->_internal_conversation_id_arr_size(); i < n; i++) {
    const auto& s = this->_internal_conversation_id_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr");
    target = stream->WriteString(1, s, target);
  }

  // int64 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  return target;
}

size_t FetchMixedLinkMessagesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string conversation_id_arr = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.conversation_id_arr_.size());
  for (int i = 0, n = _impl_.conversation_id_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.conversation_id_arr_.Get(i));
  }

  // int64 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchMixedLinkMessagesReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchMixedLinkMessagesReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchMixedLinkMessagesReq::GetClassData() const { return &_class_data_; }


void FetchMixedLinkMessagesReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchMixedLinkMessagesReq*>(&to_msg);
  auto& from = static_cast<const FetchMixedLinkMessagesReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.conversation_id_arr_.MergeFrom(from._impl_.conversation_id_arr_);
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchMixedLinkMessagesReq::CopyFrom(const FetchMixedLinkMessagesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchMixedLinkMessagesReq::IsInitialized() const {
  return true;
}

void FetchMixedLinkMessagesReq::InternalSwap(FetchMixedLinkMessagesReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.conversation_id_arr_.InternalSwap(&other->_impl_.conversation_id_arr_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchMixedLinkMessagesReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[9]);
}

// ===================================================================

class FetchMixedLinkMessagesResp::_Internal {
 public:
};

FetchMixedLinkMessagesResp::FetchMixedLinkMessagesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.FetchMixedLinkMessagesResp)
}
FetchMixedLinkMessagesResp::FetchMixedLinkMessagesResp(const FetchMixedLinkMessagesResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchMixedLinkMessagesResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_messages_){from._impl_.conversation_messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.FetchMixedLinkMessagesResp)
}

inline void FetchMixedLinkMessagesResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FetchMixedLinkMessagesResp::~FetchMixedLinkMessagesResp() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchMixedLinkMessagesResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_messages_.~RepeatedPtrField();
}

void FetchMixedLinkMessagesResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchMixedLinkMessagesResp::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversation_messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchMixedLinkMessagesResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conversation_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchMixedLinkMessagesResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_conversation_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_conversation_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  return target;
}

size_t FetchMixedLinkMessagesResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  total_size += 1UL * this->_internal_conversation_messages_size();
  for (const auto& msg : this->_impl_.conversation_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchMixedLinkMessagesResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchMixedLinkMessagesResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchMixedLinkMessagesResp::GetClassData() const { return &_class_data_; }


void FetchMixedLinkMessagesResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchMixedLinkMessagesResp*>(&to_msg);
  auto& from = static_cast<const FetchMixedLinkMessagesResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.conversation_messages_.MergeFrom(from._impl_.conversation_messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchMixedLinkMessagesResp::CopyFrom(const FetchMixedLinkMessagesResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchMixedLinkMessagesResp::IsInitialized() const {
  return true;
}

void FetchMixedLinkMessagesResp::InternalSwap(FetchMixedLinkMessagesResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.conversation_messages_.InternalSwap(&other->_impl_.conversation_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchMixedLinkMessagesResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[10]);
}

// ===================================================================

class SendBatchMessageReq::_Internal {
 public:
};

SendBatchMessageReq::SendBatchMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.SendBatchMessageReq)
}
SendBatchMessageReq::SendBatchMessageReq(const SendBatchMessageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendBatchMessageReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_arr_){from._impl_.message_arr_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.SendBatchMessageReq)
}

inline void SendBatchMessageReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_arr_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SendBatchMessageReq::~SendBatchMessageReq() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.SendBatchMessageReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendBatchMessageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_arr_.~RepeatedPtrField();
}

void SendBatchMessageReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendBatchMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.SendBatchMessageReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendBatchMessageReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .roc.im.sdk.net.ContentMessage message_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendBatchMessageReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.SendBatchMessageReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.ContentMessage message_arr = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_message_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_message_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.SendBatchMessageReq)
  return target;
}

size_t SendBatchMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.SendBatchMessageReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.ContentMessage message_arr = 1;
  total_size += 1UL * this->_internal_message_arr_size();
  for (const auto& msg : this->_impl_.message_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendBatchMessageReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendBatchMessageReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendBatchMessageReq::GetClassData() const { return &_class_data_; }


void SendBatchMessageReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendBatchMessageReq*>(&to_msg);
  auto& from = static_cast<const SendBatchMessageReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.SendBatchMessageReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.message_arr_.MergeFrom(from._impl_.message_arr_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendBatchMessageReq::CopyFrom(const SendBatchMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.SendBatchMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBatchMessageReq::IsInitialized() const {
  return true;
}

void SendBatchMessageReq::InternalSwap(SendBatchMessageReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.message_arr_.InternalSwap(&other->_impl_.message_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendBatchMessageReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[11]);
}

// ===================================================================

class SendBatchMessageResp::_Internal {
 public:
};

SendBatchMessageResp::SendBatchMessageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.SendBatchMessageResp)
}
SendBatchMessageResp::SendBatchMessageResp(const SendBatchMessageResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendBatchMessageResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.send_message_response_arr_){from._impl_.send_message_response_arr_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.SendBatchMessageResp)
}

inline void SendBatchMessageResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.send_message_response_arr_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SendBatchMessageResp::~SendBatchMessageResp() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.SendBatchMessageResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendBatchMessageResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.send_message_response_arr_.~RepeatedPtrField();
}

void SendBatchMessageResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendBatchMessageResp::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.SendBatchMessageResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.send_message_response_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendBatchMessageResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .roc.im.sdk.net.SendBatchMessageResp send_message_response_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_send_message_response_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendBatchMessageResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.SendBatchMessageResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.SendBatchMessageResp send_message_response_arr = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_send_message_response_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_send_message_response_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.SendBatchMessageResp)
  return target;
}

size_t SendBatchMessageResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.SendBatchMessageResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.SendBatchMessageResp send_message_response_arr = 1;
  total_size += 1UL * this->_internal_send_message_response_arr_size();
  for (const auto& msg : this->_impl_.send_message_response_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendBatchMessageResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendBatchMessageResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendBatchMessageResp::GetClassData() const { return &_class_data_; }


void SendBatchMessageResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendBatchMessageResp*>(&to_msg);
  auto& from = static_cast<const SendBatchMessageResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.SendBatchMessageResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.send_message_response_arr_.MergeFrom(from._impl_.send_message_response_arr_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendBatchMessageResp::CopyFrom(const SendBatchMessageResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.SendBatchMessageResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBatchMessageResp::IsInitialized() const {
  return true;
}

void SendBatchMessageResp::InternalSwap(SendBatchMessageResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.send_message_response_arr_.InternalSwap(&other->_impl_.send_message_response_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendBatchMessageResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[12]);
}

// ===================================================================

class PushMessages::_Internal {
 public:
};

PushMessages::PushMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.PushMessages)
}
PushMessages::PushMessages(const PushMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PushMessages* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.push_message_arr_){from._impl_.push_message_arr_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.PushMessages)
}

inline void PushMessages::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.push_message_arr_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PushMessages::~PushMessages() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.PushMessages)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PushMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.push_message_arr_.~RepeatedPtrField();
}

void PushMessages::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PushMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.PushMessages)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.push_message_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushMessages::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .roc.im.sdk.net.Message push_message_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_push_message_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushMessages::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.PushMessages)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.Message push_message_arr = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_push_message_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_push_message_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.PushMessages)
  return target;
}

size_t PushMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.PushMessages)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.Message push_message_arr = 1;
  total_size += 1UL * this->_internal_push_message_arr_size();
  for (const auto& msg : this->_impl_.push_message_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushMessages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PushMessages::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushMessages::GetClassData() const { return &_class_data_; }


void PushMessages::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PushMessages*>(&to_msg);
  auto& from = static_cast<const PushMessages&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.PushMessages)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.push_message_arr_.MergeFrom(from._impl_.push_message_arr_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushMessages::CopyFrom(const PushMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.PushMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMessages::IsInitialized() const {
  return true;
}

void PushMessages::InternalSwap(PushMessages* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.push_message_arr_.InternalSwap(&other->_impl_.push_message_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushMessages::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[13]);
}

// ===================================================================

class RequestBody::_Internal {
 public:
  static const ::roc::im::sdk::net::FetchMixedLinkMessagesReq& fetch_mixed_link_messages_request(const RequestBody* msg);
  static const ::roc::im::sdk::net::FetchSingleLinkMessagesReq& fetch_single_link_messages_request(const RequestBody* msg);
  static const ::roc::im::sdk::net::SendBatchMessageReq& send_batch_messages_request(const RequestBody* msg);
};

const ::roc::im::sdk::net::FetchMixedLinkMessagesReq&
RequestBody::_Internal::fetch_mixed_link_messages_request(const RequestBody* msg) {
  return *msg->_impl_.fetch_mixed_link_messages_request_;
}
const ::roc::im::sdk::net::FetchSingleLinkMessagesReq&
RequestBody::_Internal::fetch_single_link_messages_request(const RequestBody* msg) {
  return *msg->_impl_.fetch_single_link_messages_request_;
}
const ::roc::im::sdk::net::SendBatchMessageReq&
RequestBody::_Internal::send_batch_messages_request(const RequestBody* msg) {
  return *msg->_impl_.send_batch_messages_request_;
}
RequestBody::RequestBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.RequestBody)
}
RequestBody::RequestBody(const RequestBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.fetch_mixed_link_messages_request_){nullptr}
    , decltype(_impl_.fetch_single_link_messages_request_){nullptr}
    , decltype(_impl_.send_batch_messages_request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fetch_mixed_link_messages_request()) {
    _this->_impl_.fetch_mixed_link_messages_request_ = new ::roc::im::sdk::net::FetchMixedLinkMessagesReq(*from._impl_.fetch_mixed_link_messages_request_);
  }
  if (from._internal_has_fetch_single_link_messages_request()) {
    _this->_impl_.fetch_single_link_messages_request_ = new ::roc::im::sdk::net::FetchSingleLinkMessagesReq(*from._impl_.fetch_single_link_messages_request_);
  }
  if (from._internal_has_send_batch_messages_request()) {
    _this->_impl_.send_batch_messages_request_ = new ::roc::im::sdk::net::SendBatchMessageReq(*from._impl_.send_batch_messages_request_);
  }
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.RequestBody)
}

inline void RequestBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.fetch_mixed_link_messages_request_){nullptr}
    , decltype(_impl_.fetch_single_link_messages_request_){nullptr}
    , decltype(_impl_.send_batch_messages_request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestBody::~RequestBody() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.RequestBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fetch_mixed_link_messages_request_;
  if (this != internal_default_instance()) delete _impl_.fetch_single_link_messages_request_;
  if (this != internal_default_instance()) delete _impl_.send_batch_messages_request_;
}

void RequestBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.RequestBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fetch_mixed_link_messages_request_ != nullptr) {
    delete _impl_.fetch_mixed_link_messages_request_;
  }
  _impl_.fetch_mixed_link_messages_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fetch_single_link_messages_request_ != nullptr) {
    delete _impl_.fetch_single_link_messages_request_;
  }
  _impl_.fetch_single_link_messages_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.send_batch_messages_request_ != nullptr) {
    delete _impl_.send_batch_messages_request_;
  }
  _impl_.send_batch_messages_request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.RequestBody.request_id"));
        } else
          goto handle_unusual;
        continue;
      // .roc.im.sdk.net.FetchMixedLinkMessagesReq fetch_mixed_link_messages_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_mixed_link_messages_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .roc.im.sdk.net.FetchSingleLinkMessagesReq fetch_single_link_messages_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_single_link_messages_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .roc.im.sdk.net.SendBatchMessageReq send_batch_messages_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_batch_messages_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.RequestBody.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.RequestBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.RequestBody.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .roc.im.sdk.net.FetchMixedLinkMessagesReq fetch_mixed_link_messages_request = 2;
  if (this->_internal_has_fetch_mixed_link_messages_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fetch_mixed_link_messages_request(this),
        _Internal::fetch_mixed_link_messages_request(this).GetCachedSize(), target, stream);
  }

  // .roc.im.sdk.net.FetchSingleLinkMessagesReq fetch_single_link_messages_request = 3;
  if (this->_internal_has_fetch_single_link_messages_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fetch_single_link_messages_request(this),
        _Internal::fetch_single_link_messages_request(this).GetCachedSize(), target, stream);
  }

  // .roc.im.sdk.net.SendBatchMessageReq send_batch_messages_request = 4;
  if (this->_internal_has_send_batch_messages_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::send_batch_messages_request(this),
        _Internal::send_batch_messages_request(this).GetCachedSize(), target, stream);
  }

  // string url = 5;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.RequestBody.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.RequestBody)
  return target;
}

size_t RequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.RequestBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string url = 5;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .roc.im.sdk.net.FetchMixedLinkMessagesReq fetch_mixed_link_messages_request = 2;
  if (this->_internal_has_fetch_mixed_link_messages_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fetch_mixed_link_messages_request_);
  }

  // .roc.im.sdk.net.FetchSingleLinkMessagesReq fetch_single_link_messages_request = 3;
  if (this->_internal_has_fetch_single_link_messages_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fetch_single_link_messages_request_);
  }

  // .roc.im.sdk.net.SendBatchMessageReq send_batch_messages_request = 4;
  if (this->_internal_has_send_batch_messages_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.send_batch_messages_request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBody::GetClassData() const { return &_class_data_; }


void RequestBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestBody*>(&to_msg);
  auto& from = static_cast<const RequestBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.RequestBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_has_fetch_mixed_link_messages_request()) {
    _this->_internal_mutable_fetch_mixed_link_messages_request()->::roc::im::sdk::net::FetchMixedLinkMessagesReq::MergeFrom(
        from._internal_fetch_mixed_link_messages_request());
  }
  if (from._internal_has_fetch_single_link_messages_request()) {
    _this->_internal_mutable_fetch_single_link_messages_request()->::roc::im::sdk::net::FetchSingleLinkMessagesReq::MergeFrom(
        from._internal_fetch_single_link_messages_request());
  }
  if (from._internal_has_send_batch_messages_request()) {
    _this->_internal_mutable_send_batch_messages_request()->::roc::im::sdk::net::SendBatchMessageReq::MergeFrom(
        from._internal_send_batch_messages_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBody::CopyFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBody::IsInitialized() const {
  return true;
}

void RequestBody::InternalSwap(RequestBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBody, _impl_.send_batch_messages_request_)
      + sizeof(RequestBody::_impl_.send_batch_messages_request_)
      - PROTOBUF_FIELD_OFFSET(RequestBody, _impl_.fetch_mixed_link_messages_request_)>(
          reinterpret_cast<char*>(&_impl_.fetch_mixed_link_messages_request_),
          reinterpret_cast<char*>(&other->_impl_.fetch_mixed_link_messages_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[14]);
}

// ===================================================================

class ResponseBody::_Internal {
 public:
  static const ::roc::im::sdk::net::FetchMixedLinkMessagesResp& fetch_mixed_link_messages_response(const ResponseBody* msg);
  static const ::roc::im::sdk::net::FetchSingleLinkMessagesResp& fetch_single_link_messages_response(const ResponseBody* msg);
  static const ::roc::im::sdk::net::SendBatchMessageResp& send_batch_messages_response(const ResponseBody* msg);
  static const ::roc::im::sdk::net::PushMessages& push_message(const ResponseBody* msg);
};

const ::roc::im::sdk::net::FetchMixedLinkMessagesResp&
ResponseBody::_Internal::fetch_mixed_link_messages_response(const ResponseBody* msg) {
  return *msg->_impl_.fetch_mixed_link_messages_response_;
}
const ::roc::im::sdk::net::FetchSingleLinkMessagesResp&
ResponseBody::_Internal::fetch_single_link_messages_response(const ResponseBody* msg) {
  return *msg->_impl_.fetch_single_link_messages_response_;
}
const ::roc::im::sdk::net::SendBatchMessageResp&
ResponseBody::_Internal::send_batch_messages_response(const ResponseBody* msg) {
  return *msg->_impl_.send_batch_messages_response_;
}
const ::roc::im::sdk::net::PushMessages&
ResponseBody::_Internal::push_message(const ResponseBody* msg) {
  return *msg->_impl_.push_message_;
}
ResponseBody::ResponseBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.ResponseBody)
}
ResponseBody::ResponseBody(const ResponseBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_id_){}
    , decltype(_impl_.fetch_mixed_link_messages_response_){nullptr}
    , decltype(_impl_.fetch_single_link_messages_response_){nullptr}
    , decltype(_impl_.send_batch_messages_response_){nullptr}
    , decltype(_impl_.push_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.response_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response_id().empty()) {
    _this->_impl_.response_id_.Set(from._internal_response_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_fetch_mixed_link_messages_response()) {
    _this->_impl_.fetch_mixed_link_messages_response_ = new ::roc::im::sdk::net::FetchMixedLinkMessagesResp(*from._impl_.fetch_mixed_link_messages_response_);
  }
  if (from._internal_has_fetch_single_link_messages_response()) {
    _this->_impl_.fetch_single_link_messages_response_ = new ::roc::im::sdk::net::FetchSingleLinkMessagesResp(*from._impl_.fetch_single_link_messages_response_);
  }
  if (from._internal_has_send_batch_messages_response()) {
    _this->_impl_.send_batch_messages_response_ = new ::roc::im::sdk::net::SendBatchMessageResp(*from._impl_.send_batch_messages_response_);
  }
  if (from._internal_has_push_message()) {
    _this->_impl_.push_message_ = new ::roc::im::sdk::net::PushMessages(*from._impl_.push_message_);
  }
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.ResponseBody)
}

inline void ResponseBody::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_id_){}
    , decltype(_impl_.fetch_mixed_link_messages_response_){nullptr}
    , decltype(_impl_.fetch_single_link_messages_response_){nullptr}
    , decltype(_impl_.send_batch_messages_response_){nullptr}
    , decltype(_impl_.push_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.response_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseBody::~ResponseBody() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.ResponseBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fetch_mixed_link_messages_response_;
  if (this != internal_default_instance()) delete _impl_.fetch_single_link_messages_response_;
  if (this != internal_default_instance()) delete _impl_.send_batch_messages_response_;
  if (this != internal_default_instance()) delete _impl_.push_message_;
}

void ResponseBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseBody::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.ResponseBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.fetch_mixed_link_messages_response_ != nullptr) {
    delete _impl_.fetch_mixed_link_messages_response_;
  }
  _impl_.fetch_mixed_link_messages_response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fetch_single_link_messages_response_ != nullptr) {
    delete _impl_.fetch_single_link_messages_response_;
  }
  _impl_.fetch_single_link_messages_response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.send_batch_messages_response_ != nullptr) {
    delete _impl_.send_batch_messages_response_;
  }
  _impl_.send_batch_messages_response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.push_message_ != nullptr) {
    delete _impl_.push_message_;
  }
  _impl_.push_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string response_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_response_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "roc.im.sdk.net.ResponseBody.response_id"));
        } else
          goto handle_unusual;
        continue;
      // .roc.im.sdk.net.FetchMixedLinkMessagesResp fetch_mixed_link_messages_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_mixed_link_messages_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .roc.im.sdk.net.FetchSingleLinkMessagesResp fetch_single_link_messages_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_single_link_messages_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .roc.im.sdk.net.SendBatchMessageResp send_batch_messages_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_batch_messages_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .roc.im.sdk.net.PushMessages push_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_push_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.ResponseBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string response_id = 1;
  if (!this->_internal_response_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_id().data(), static_cast<int>(this->_internal_response_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.ResponseBody.response_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response_id(), target);
  }

  // .roc.im.sdk.net.FetchMixedLinkMessagesResp fetch_mixed_link_messages_response = 2;
  if (this->_internal_has_fetch_mixed_link_messages_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fetch_mixed_link_messages_response(this),
        _Internal::fetch_mixed_link_messages_response(this).GetCachedSize(), target, stream);
  }

  // .roc.im.sdk.net.FetchSingleLinkMessagesResp fetch_single_link_messages_response = 3;
  if (this->_internal_has_fetch_single_link_messages_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fetch_single_link_messages_response(this),
        _Internal::fetch_single_link_messages_response(this).GetCachedSize(), target, stream);
  }

  // .roc.im.sdk.net.SendBatchMessageResp send_batch_messages_response = 4;
  if (this->_internal_has_send_batch_messages_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::send_batch_messages_response(this),
        _Internal::send_batch_messages_response(this).GetCachedSize(), target, stream);
  }

  // .roc.im.sdk.net.PushMessages push_message = 5;
  if (this->_internal_has_push_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::push_message(this),
        _Internal::push_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.ResponseBody)
  return target;
}

size_t ResponseBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.ResponseBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_id = 1;
  if (!this->_internal_response_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_id());
  }

  // .roc.im.sdk.net.FetchMixedLinkMessagesResp fetch_mixed_link_messages_response = 2;
  if (this->_internal_has_fetch_mixed_link_messages_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fetch_mixed_link_messages_response_);
  }

  // .roc.im.sdk.net.FetchSingleLinkMessagesResp fetch_single_link_messages_response = 3;
  if (this->_internal_has_fetch_single_link_messages_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fetch_single_link_messages_response_);
  }

  // .roc.im.sdk.net.SendBatchMessageResp send_batch_messages_response = 4;
  if (this->_internal_has_send_batch_messages_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.send_batch_messages_response_);
  }

  // .roc.im.sdk.net.PushMessages push_message = 5;
  if (this->_internal_has_push_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.push_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseBody::GetClassData() const { return &_class_data_; }


void ResponseBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseBody*>(&to_msg);
  auto& from = static_cast<const ResponseBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.ResponseBody)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_response_id().empty()) {
    _this->_internal_set_response_id(from._internal_response_id());
  }
  if (from._internal_has_fetch_mixed_link_messages_response()) {
    _this->_internal_mutable_fetch_mixed_link_messages_response()->::roc::im::sdk::net::FetchMixedLinkMessagesResp::MergeFrom(
        from._internal_fetch_mixed_link_messages_response());
  }
  if (from._internal_has_fetch_single_link_messages_response()) {
    _this->_internal_mutable_fetch_single_link_messages_response()->::roc::im::sdk::net::FetchSingleLinkMessagesResp::MergeFrom(
        from._internal_fetch_single_link_messages_response());
  }
  if (from._internal_has_send_batch_messages_response()) {
    _this->_internal_mutable_send_batch_messages_response()->::roc::im::sdk::net::SendBatchMessageResp::MergeFrom(
        from._internal_send_batch_messages_response());
  }
  if (from._internal_has_push_message()) {
    _this->_internal_mutable_push_message()->::roc::im::sdk::net::PushMessages::MergeFrom(
        from._internal_push_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseBody::CopyFrom(const ResponseBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.ResponseBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBody::IsInitialized() const {
  return true;
}

void ResponseBody::InternalSwap(ResponseBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_id_, lhs_arena,
      &other->_impl_.response_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseBody, _impl_.push_message_)
      + sizeof(ResponseBody::_impl_.push_message_)
      - PROTOBUF_FIELD_OFFSET(ResponseBody, _impl_.fetch_mixed_link_messages_response_)>(
          reinterpret_cast<char*>(&_impl_.fetch_mixed_link_messages_response_),
          reinterpret_cast<char*>(&other->_impl_.fetch_mixed_link_messages_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseBody::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pb_2fLCModel_2eproto_getter, &descriptor_table_pb_2fLCModel_2eproto_once,
      file_level_metadata_pb_2fLCModel_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace sdk
}  // namespace im
}  // namespace roc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::Conversation*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::Conversation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::Conversation >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::CmdMessage*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::CmdMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::CmdMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::ContentMessage_ExtEntry_DoNotUse*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::ContentMessage_ExtEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::ContentMessage_ExtEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::ContentMessage*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::ContentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::ContentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::Message*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::ConversationMessages*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::ConversationMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::ConversationMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::FetchSingleLinkMessagesReq*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::FetchSingleLinkMessagesReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::FetchSingleLinkMessagesReq >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::FetchSingleLinkMessagesResp*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::FetchSingleLinkMessagesResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::FetchSingleLinkMessagesResp >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::FetchMixedLinkMessagesReq*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::FetchMixedLinkMessagesReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::FetchMixedLinkMessagesReq >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::FetchMixedLinkMessagesResp*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::FetchMixedLinkMessagesResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::FetchMixedLinkMessagesResp >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::SendBatchMessageReq*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::SendBatchMessageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::SendBatchMessageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::SendBatchMessageResp*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::SendBatchMessageResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::SendBatchMessageResp >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::PushMessages*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::PushMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::PushMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::RequestBody*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::RequestBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::RequestBody >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::ResponseBody*
Arena::CreateMaybeMessage< ::roc::im::sdk::net::ResponseBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::ResponseBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
