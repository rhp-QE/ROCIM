// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#include "im.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Conversation_ExtEntry_DoNotUse_im_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConversationMessages_im_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchMixedLinkMessagesReq_im_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchMixedLinkMessagesResp_im_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchSingleLinkMessagesReq_im_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchSingleLinkMessagesResp_im_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Message_im_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_ExtEntry_DoNotUse_im_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PushMessages_im_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendBatchMessageReq_im_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_im_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendBatchMessageResp_im_2eproto;
namespace roc {
namespace im {
namespace sdk {
namespace net {
class Conversation_ExtEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conversation_ExtEntry_DoNotUse> _instance;
} _Conversation_ExtEntry_DoNotUse_default_instance_;
class ConversationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conversation> _instance;
} _Conversation_default_instance_;
class Message_ExtEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_ExtEntry_DoNotUse> _instance;
} _Message_ExtEntry_DoNotUse_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
class ConversationMessagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConversationMessages> _instance;
} _ConversationMessages_default_instance_;
class FetchSingleLinkMessagesReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchSingleLinkMessagesReq> _instance;
} _FetchSingleLinkMessagesReq_default_instance_;
class FetchSingleLinkMessagesRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchSingleLinkMessagesResp> _instance;
} _FetchSingleLinkMessagesResp_default_instance_;
class FetchMixedLinkMessagesReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchMixedLinkMessagesReq> _instance;
} _FetchMixedLinkMessagesReq_default_instance_;
class FetchMixedLinkMessagesRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchMixedLinkMessagesResp> _instance;
} _FetchMixedLinkMessagesResp_default_instance_;
class SendBatchMessageReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendBatchMessageReq> _instance;
} _SendBatchMessageReq_default_instance_;
class SendBatchMessageRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendBatchMessageResp> _instance;
} _SendBatchMessageResp_default_instance_;
class PushMessagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushMessages> _instance;
} _PushMessages_default_instance_;
class RequestBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestBody> _instance;
} _RequestBody_default_instance_;
class ResponseBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseBody> _instance;
} _ResponseBody_default_instance_;
}  // namespace net
}  // namespace sdk
}  // namespace im
}  // namespace roc
static void InitDefaultsscc_info_Conversation_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_Conversation_default_instance_;
    new (ptr) ::roc::im::sdk::net::Conversation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::Conversation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Conversation_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Conversation_im_2eproto}, {
      &scc_info_Conversation_ExtEntry_DoNotUse_im_2eproto.base,}};

static void InitDefaultsscc_info_Conversation_ExtEntry_DoNotUse_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_Conversation_ExtEntry_DoNotUse_default_instance_;
    new (ptr) ::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse();
  }
  ::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Conversation_ExtEntry_DoNotUse_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Conversation_ExtEntry_DoNotUse_im_2eproto}, {}};

static void InitDefaultsscc_info_ConversationMessages_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_ConversationMessages_default_instance_;
    new (ptr) ::roc::im::sdk::net::ConversationMessages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::ConversationMessages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConversationMessages_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConversationMessages_im_2eproto}, {
      &scc_info_Message_im_2eproto.base,}};

static void InitDefaultsscc_info_FetchMixedLinkMessagesReq_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_FetchMixedLinkMessagesReq_default_instance_;
    new (ptr) ::roc::im::sdk::net::FetchMixedLinkMessagesReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchMixedLinkMessagesReq_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchMixedLinkMessagesReq_im_2eproto}, {}};

static void InitDefaultsscc_info_FetchMixedLinkMessagesResp_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_FetchMixedLinkMessagesResp_default_instance_;
    new (ptr) ::roc::im::sdk::net::FetchMixedLinkMessagesResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchMixedLinkMessagesResp_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchMixedLinkMessagesResp_im_2eproto}, {
      &scc_info_ConversationMessages_im_2eproto.base,}};

static void InitDefaultsscc_info_FetchSingleLinkMessagesReq_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_FetchSingleLinkMessagesReq_default_instance_;
    new (ptr) ::roc::im::sdk::net::FetchSingleLinkMessagesReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchSingleLinkMessagesReq_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchSingleLinkMessagesReq_im_2eproto}, {}};

static void InitDefaultsscc_info_FetchSingleLinkMessagesResp_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_FetchSingleLinkMessagesResp_default_instance_;
    new (ptr) ::roc::im::sdk::net::FetchSingleLinkMessagesResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FetchSingleLinkMessagesResp_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FetchSingleLinkMessagesResp_im_2eproto}, {
      &scc_info_ConversationMessages_im_2eproto.base,}};

static void InitDefaultsscc_info_Message_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_Message_default_instance_;
    new (ptr) ::roc::im::sdk::net::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Message_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Message_im_2eproto}, {
      &scc_info_Message_ExtEntry_DoNotUse_im_2eproto.base,}};

static void InitDefaultsscc_info_Message_ExtEntry_DoNotUse_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_Message_ExtEntry_DoNotUse_default_instance_;
    new (ptr) ::roc::im::sdk::net::Message_ExtEntry_DoNotUse();
  }
  ::roc::im::sdk::net::Message_ExtEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_ExtEntry_DoNotUse_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_ExtEntry_DoNotUse_im_2eproto}, {}};

static void InitDefaultsscc_info_PushMessages_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_PushMessages_default_instance_;
    new (ptr) ::roc::im::sdk::net::PushMessages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::PushMessages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PushMessages_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PushMessages_im_2eproto}, {
      &scc_info_Message_im_2eproto.base,}};

static void InitDefaultsscc_info_RequestBody_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_RequestBody_default_instance_;
    new (ptr) ::roc::im::sdk::net::RequestBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::RequestBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestBody_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RequestBody_im_2eproto}, {
      &scc_info_FetchMixedLinkMessagesReq_im_2eproto.base,
      &scc_info_FetchSingleLinkMessagesReq_im_2eproto.base,
      &scc_info_SendBatchMessageReq_im_2eproto.base,}};

static void InitDefaultsscc_info_ResponseBody_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_ResponseBody_default_instance_;
    new (ptr) ::roc::im::sdk::net::ResponseBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::ResponseBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseBody_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ResponseBody_im_2eproto}, {
      &scc_info_FetchMixedLinkMessagesResp_im_2eproto.base,
      &scc_info_FetchSingleLinkMessagesResp_im_2eproto.base,
      &scc_info_SendBatchMessageResp_im_2eproto.base,
      &scc_info_PushMessages_im_2eproto.base,}};

static void InitDefaultsscc_info_SendBatchMessageReq_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_SendBatchMessageReq_default_instance_;
    new (ptr) ::roc::im::sdk::net::SendBatchMessageReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::SendBatchMessageReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendBatchMessageReq_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendBatchMessageReq_im_2eproto}, {
      &scc_info_Message_im_2eproto.base,}};

static void InitDefaultsscc_info_SendBatchMessageResp_im_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::roc::im::sdk::net::_SendBatchMessageResp_default_instance_;
    new (ptr) ::roc::im::sdk::net::SendBatchMessageResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::roc::im::sdk::net::SendBatchMessageResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendBatchMessageResp_im_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendBatchMessageResp_im_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_im_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_im_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_im_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_im_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation, convertsion_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation, owner_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Conversation, ext_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message_ExtEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message_ExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message_ExtEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message_ExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, message_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, content_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, ext_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, sender_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, convertsion_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, message_type_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::Message, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ConversationMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ConversationMessages, conversation_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ConversationMessages, message_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesReq, conversation_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesReq, from_index_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesReq, to_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchSingleLinkMessagesResp, conversation_messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchMixedLinkMessagesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchMixedLinkMessagesReq, conversation_id_arr_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchMixedLinkMessagesReq, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchMixedLinkMessagesResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::FetchMixedLinkMessagesResp, conversation_messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::SendBatchMessageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::SendBatchMessageReq, message_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::SendBatchMessageResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::SendBatchMessageResp, send_message_response_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::PushMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::PushMessages, push_message_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, request_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, fetch_mixed_link_messages_request_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, fetch_single_link_messages_request_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::RequestBody, send_batch_messages_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, response_id_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, fetch_mixed_link_messages_response_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, fetch_single_link_messages_response_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, send_batch_messages_response_),
  PROTOBUF_FIELD_OFFSET(::roc::im::sdk::net::ResponseBody, push_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse)},
  { 9, -1, sizeof(::roc::im::sdk::net::Conversation)},
  { 17, 24, sizeof(::roc::im::sdk::net::Message_ExtEntry_DoNotUse)},
  { 26, -1, sizeof(::roc::im::sdk::net::Message)},
  { 38, -1, sizeof(::roc::im::sdk::net::ConversationMessages)},
  { 45, -1, sizeof(::roc::im::sdk::net::FetchSingleLinkMessagesReq)},
  { 53, -1, sizeof(::roc::im::sdk::net::FetchSingleLinkMessagesResp)},
  { 59, -1, sizeof(::roc::im::sdk::net::FetchMixedLinkMessagesReq)},
  { 66, -1, sizeof(::roc::im::sdk::net::FetchMixedLinkMessagesResp)},
  { 72, -1, sizeof(::roc::im::sdk::net::SendBatchMessageReq)},
  { 78, -1, sizeof(::roc::im::sdk::net::SendBatchMessageResp)},
  { 84, -1, sizeof(::roc::im::sdk::net::PushMessages)},
  { 90, -1, sizeof(::roc::im::sdk::net::RequestBody)},
  { 99, -1, sizeof(::roc::im::sdk::net::ResponseBody)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_Conversation_ExtEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_Conversation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_Message_ExtEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_ConversationMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_FetchSingleLinkMessagesReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_FetchSingleLinkMessagesResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_FetchMixedLinkMessagesReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_FetchMixedLinkMessagesResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_SendBatchMessageReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_SendBatchMessageResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_PushMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_RequestBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::roc::im::sdk::net::_ResponseBody_default_instance_),
};

const char descriptor_table_protodef_im_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010im.proto\022\016roc.im.sdk.net\"\230\001\n\014Conversat"
  "ion\022\026\n\016convertsion_id\030\001 \001(\t\022\020\n\010owner_id\030"
  "\002 \001(\t\0222\n\003ext\030\003 \003(\0132%.roc.im.sdk.net.Conv"
  "ersation.ExtEntry\032*\n\010ExtEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\331\001\n\007Message\022\022\n\nmes"
  "sage_id\030\001 \001(\t\022\017\n\007content\030\002 \001(\014\022-\n\003ext\030\003 "
  "\003(\0132 .roc.im.sdk.net.Message.ExtEntry\022\021\n"
  "\tsender_id\030\004 \001(\t\022\026\n\016convertsion_id\030\005 \001(\t"
  "\022\024\n\014message_type\030\006 \001(\003\022\r\n\005index\030\007 \001(\003\032*\n"
  "\010ExtEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\"]\n\024ConversationMessages\022\027\n\017conversatio"
  "n_id\030\001 \001(\t\022,\n\013message_arr\030\002 \003(\0132\027.roc.im"
  ".sdk.net.Message\"[\n\032FetchSingleLinkMessa"
  "gesReq\022\027\n\017conversation_id\030\001 \001(\t\022\022\n\nfrom_"
  "index\030\002 \001(\003\022\020\n\010to_index\030\003 \001(\003\"b\n\033FetchSi"
  "ngleLinkMessagesResp\022C\n\025conversation_mes"
  "sages\030\001 \001(\0132$.roc.im.sdk.net.Conversatio"
  "nMessages\"G\n\031FetchMixedLinkMessagesReq\022\033"
  "\n\023conversation_id_arr\030\001 \003(\t\022\r\n\005count\030\002 \001"
  "(\003\"a\n\032FetchMixedLinkMessagesResp\022C\n\025conv"
  "ersation_messages\030\001 \003(\0132$.roc.im.sdk.net"
  ".ConversationMessages\"C\n\023SendBatchMessag"
  "eReq\022,\n\013message_arr\030\001 \003(\0132\027.roc.im.sdk.n"
  "et.Message\"_\n\024SendBatchMessageResp\022G\n\031se"
  "nd_message_response_arr\030\001 \003(\0132$.roc.im.s"
  "dk.net.SendBatchMessageResp\"A\n\014PushMessa"
  "ges\0221\n\020push_message_arr\030\001 \003(\0132\027.roc.im.s"
  "dk.net.Message\"\231\002\n\013RequestBody\022\022\n\nreques"
  "t_id\030\001 \001(\t\022T\n!fetch_mixed_link_messages_"
  "request\030\002 \001(\0132).roc.im.sdk.net.FetchMixe"
  "dLinkMessagesReq\022V\n\"fetch_single_link_me"
  "ssages_request\030\003 \001(\0132*.roc.im.sdk.net.Fe"
  "tchSingleLinkMessagesReq\022H\n\033send_batch_m"
  "essages_request\030\004 \001(\0132#.roc.im.sdk.net.S"
  "endBatchMessageReq\"\325\002\n\014ResponseBody\022\023\n\013r"
  "esponse_id\030\001 \001(\t\022V\n\"fetch_mixed_link_mes"
  "sages_response\030\002 \001(\0132*.roc.im.sdk.net.Fe"
  "tchMixedLinkMessagesResp\022X\n#fetch_single"
  "_link_messages_response\030\003 \001(\0132+.roc.im.s"
  "dk.net.FetchSingleLinkMessagesResp\022J\n\034se"
  "nd_batch_messages_response\030\004 \001(\0132$.roc.i"
  "m.sdk.net.SendBatchMessageResp\0222\n\014push_m"
  "essage\030\005 \001(\0132\034.roc.im.sdk.net.PushMessag"
  "esB\025Z\005./;im\252\002\013IM.Protocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_im_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_im_2eproto_sccs[14] = {
  &scc_info_Conversation_im_2eproto.base,
  &scc_info_Conversation_ExtEntry_DoNotUse_im_2eproto.base,
  &scc_info_ConversationMessages_im_2eproto.base,
  &scc_info_FetchMixedLinkMessagesReq_im_2eproto.base,
  &scc_info_FetchMixedLinkMessagesResp_im_2eproto.base,
  &scc_info_FetchSingleLinkMessagesReq_im_2eproto.base,
  &scc_info_FetchSingleLinkMessagesResp_im_2eproto.base,
  &scc_info_Message_im_2eproto.base,
  &scc_info_Message_ExtEntry_DoNotUse_im_2eproto.base,
  &scc_info_PushMessages_im_2eproto.base,
  &scc_info_RequestBody_im_2eproto.base,
  &scc_info_ResponseBody_im_2eproto.base,
  &scc_info_SendBatchMessageReq_im_2eproto.base,
  &scc_info_SendBatchMessageResp_im_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_im_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_im_2eproto = {
  false, false, descriptor_table_protodef_im_2eproto, "im.proto", 1753,
  &descriptor_table_im_2eproto_once, descriptor_table_im_2eproto_sccs, descriptor_table_im_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_im_2eproto::offsets,
  file_level_metadata_im_2eproto, 14, file_level_enum_descriptors_im_2eproto, file_level_service_descriptors_im_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_im_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_im_2eproto)), true);
namespace roc {
namespace im {
namespace sdk {
namespace net {

// ===================================================================

Conversation_ExtEntry_DoNotUse::Conversation_ExtEntry_DoNotUse() {}
Conversation_ExtEntry_DoNotUse::Conversation_ExtEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Conversation_ExtEntry_DoNotUse::MergeFrom(const Conversation_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Conversation_ExtEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Conversation_ExtEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Conversation::InitAsDefaultInstance() {
}
class Conversation::_Internal {
 public:
};

Conversation::Conversation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ext_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.Conversation)
}
Conversation::Conversation(const Conversation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_.MergeFrom(from.ext_);
  convertsion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_convertsion_id().empty()) {
    convertsion_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_convertsion_id(),
      GetArena());
  }
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_id().empty()) {
    owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_owner_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.Conversation)
}

void Conversation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Conversation_im_2eproto.base);
  convertsion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Conversation::~Conversation() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.Conversation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Conversation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  convertsion_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Conversation::ArenaDtor(void* object) {
  Conversation* _this = reinterpret_cast< Conversation* >(object);
  (void)_this;
}
void Conversation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Conversation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conversation& Conversation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conversation_im_2eproto.base);
  return *internal_default_instance();
}


void Conversation::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.Conversation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.Clear();
  convertsion_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Conversation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string convertsion_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_convertsion_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "roc.im.sdk.net.Conversation.convertsion_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "roc.im.sdk.net.Conversation.owner_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> ext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ext_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conversation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.Conversation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string convertsion_id = 1;
  if (this->convertsion_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_convertsion_id().data(), static_cast<int>(this->_internal_convertsion_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.Conversation.convertsion_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_convertsion_id(), target);
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.Conversation.owner_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_id(), target);
  }

  // map<string, string> ext = 3;
  if (!this->_internal_ext().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "roc.im.sdk.net.Conversation.ExtEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "roc.im.sdk.net.Conversation.ExtEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ext().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ext().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_ext().begin();
          it != this->_internal_ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Conversation_ExtEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_ext().begin();
          it != this->_internal_ext().end(); ++it) {
        target = Conversation_ExtEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.Conversation)
  return target;
}

size_t Conversation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.Conversation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> ext = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ext_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_ext().begin();
      it != this->_internal_ext().end(); ++it) {
    total_size += Conversation_ExtEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string convertsion_id = 1;
  if (this->convertsion_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_convertsion_id());
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conversation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.Conversation)
  GOOGLE_DCHECK_NE(&from, this);
  const Conversation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conversation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.Conversation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.Conversation)
    MergeFrom(*source);
  }
}

void Conversation::MergeFrom(const Conversation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.Conversation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ext_.MergeFrom(from.ext_);
  if (from.convertsion_id().size() > 0) {
    _internal_set_convertsion_id(from._internal_convertsion_id());
  }
  if (from.owner_id().size() > 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
}

void Conversation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.Conversation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conversation::CopyFrom(const Conversation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.Conversation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conversation::IsInitialized() const {
  return true;
}

void Conversation::InternalSwap(Conversation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ext_.Swap(&other->ext_);
  convertsion_id_.Swap(&other->convertsion_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_id_.Swap(&other->owner_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Conversation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Message_ExtEntry_DoNotUse::Message_ExtEntry_DoNotUse() {}
Message_ExtEntry_DoNotUse::Message_ExtEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Message_ExtEntry_DoNotUse::MergeFrom(const Message_ExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Message_ExtEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Message_ExtEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Message::InitAsDefaultInstance() {
}
class Message::_Internal {
 public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ext_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_.MergeFrom(from.ext_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_id().empty()) {
    sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sender_id(),
      GetArena());
  }
  convertsion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_convertsion_id().empty()) {
    convertsion_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_convertsion_id(),
      GetArena());
  }
  ::memcpy(&message_type_, &from.message_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&message_type_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_im_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  convertsion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&message_type_)) + sizeof(index_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  convertsion_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_im_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.Clear();
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  convertsion_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&message_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&message_type_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "roc.im.sdk.net.Message.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> ext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ext_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string sender_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "roc.im.sdk.net.Message.sender_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string convertsion_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_convertsion_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "roc.im.sdk.net.Message.convertsion_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 message_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          message_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.Message.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  // map<string, string> ext = 3;
  if (!this->_internal_ext().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "roc.im.sdk.net.Message.ExtEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "roc.im.sdk.net.Message.ExtEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ext().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ext().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_ext().begin();
          it != this->_internal_ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Message_ExtEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_ext().begin();
          it != this->_internal_ext().end(); ++it) {
        target = Message_ExtEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string sender_id = 4;
  if (this->sender_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_id().data(), static_cast<int>(this->_internal_sender_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.Message.sender_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_id(), target);
  }

  // string convertsion_id = 5;
  if (this->convertsion_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_convertsion_id().data(), static_cast<int>(this->_internal_convertsion_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.Message.convertsion_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_convertsion_id(), target);
  }

  // int64 message_type = 6;
  if (this->message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_message_type(), target);
  }

  // int64 index = 7;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> ext = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ext_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_ext().begin();
      it != this->_internal_ext().end(); ++it) {
    total_size += Message_ExtEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // string sender_id = 4;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_id());
  }

  // string convertsion_id = 5;
  if (this->convertsion_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_convertsion_id());
  }

  // int64 message_type = 6;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_message_type());
  }

  // int64 index = 7;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ext_.MergeFrom(from.ext_);
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.sender_id().size() > 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.convertsion_id().size() > 0) {
    _internal_set_convertsion_id(from._internal_convertsion_id());
  }
  if (from.message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ext_.Swap(&other->ext_);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sender_id_.Swap(&other->sender_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  convertsion_id_.Swap(&other->convertsion_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, index_)
      + sizeof(Message::index_)
      - PROTOBUF_FIELD_OFFSET(Message, message_type_)>(
          reinterpret_cast<char*>(&message_type_),
          reinterpret_cast<char*>(&other->message_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConversationMessages::InitAsDefaultInstance() {
}
class ConversationMessages::_Internal {
 public:
};

ConversationMessages::ConversationMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.ConversationMessages)
}
ConversationMessages::ConversationMessages(const ConversationMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      message_arr_(from.message_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conversation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_conversation_id().empty()) {
    conversation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_conversation_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.ConversationMessages)
}

void ConversationMessages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConversationMessages_im_2eproto.base);
  conversation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConversationMessages::~ConversationMessages() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.ConversationMessages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConversationMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  conversation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConversationMessages::ArenaDtor(void* object) {
  ConversationMessages* _this = reinterpret_cast< ConversationMessages* >(object);
  (void)_this;
}
void ConversationMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConversationMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConversationMessages& ConversationMessages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConversationMessages_im_2eproto.base);
  return *internal_default_instance();
}


void ConversationMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.ConversationMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_arr_.Clear();
  conversation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConversationMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "roc.im.sdk.net.ConversationMessages.conversation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .roc.im.sdk.net.Message message_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConversationMessages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.ConversationMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (this->conversation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.ConversationMessages.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // repeated .roc.im.sdk.net.Message message_arr = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_arr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_message_arr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.ConversationMessages)
  return target;
}

size_t ConversationMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.ConversationMessages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.Message message_arr = 2;
  total_size += 1UL * this->_internal_message_arr_size();
  for (const auto& msg : this->message_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string conversation_id = 1;
  if (this->conversation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConversationMessages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.ConversationMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const ConversationMessages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConversationMessages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.ConversationMessages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.ConversationMessages)
    MergeFrom(*source);
  }
}

void ConversationMessages::MergeFrom(const ConversationMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.ConversationMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_arr_.MergeFrom(from.message_arr_);
  if (from.conversation_id().size() > 0) {
    _internal_set_conversation_id(from._internal_conversation_id());
  }
}

void ConversationMessages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.ConversationMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConversationMessages::CopyFrom(const ConversationMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.ConversationMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConversationMessages::IsInitialized() const {
  return true;
}

void ConversationMessages::InternalSwap(ConversationMessages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_arr_.InternalSwap(&other->message_arr_);
  conversation_id_.Swap(&other->conversation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConversationMessages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchSingleLinkMessagesReq::InitAsDefaultInstance() {
}
class FetchSingleLinkMessagesReq::_Internal {
 public:
};

FetchSingleLinkMessagesReq::FetchSingleLinkMessagesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.FetchSingleLinkMessagesReq)
}
FetchSingleLinkMessagesReq::FetchSingleLinkMessagesReq(const FetchSingleLinkMessagesReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  conversation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_conversation_id().empty()) {
    conversation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_conversation_id(),
      GetArena());
  }
  ::memcpy(&from_index_, &from.from_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_index_) -
    reinterpret_cast<char*>(&from_index_)) + sizeof(to_index_));
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.FetchSingleLinkMessagesReq)
}

void FetchSingleLinkMessagesReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchSingleLinkMessagesReq_im_2eproto.base);
  conversation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_index_) -
      reinterpret_cast<char*>(&from_index_)) + sizeof(to_index_));
}

FetchSingleLinkMessagesReq::~FetchSingleLinkMessagesReq() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchSingleLinkMessagesReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  conversation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FetchSingleLinkMessagesReq::ArenaDtor(void* object) {
  FetchSingleLinkMessagesReq* _this = reinterpret_cast< FetchSingleLinkMessagesReq* >(object);
  (void)_this;
}
void FetchSingleLinkMessagesReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchSingleLinkMessagesReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchSingleLinkMessagesReq& FetchSingleLinkMessagesReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchSingleLinkMessagesReq_im_2eproto.base);
  return *internal_default_instance();
}


void FetchSingleLinkMessagesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conversation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&from_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_index_) -
      reinterpret_cast<char*>(&from_index_)) + sizeof(to_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchSingleLinkMessagesReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 from_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          from_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchSingleLinkMessagesReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (this->conversation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conversation_id().data(), static_cast<int>(this->_internal_conversation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_conversation_id(), target);
  }

  // int64 from_index = 2;
  if (this->from_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_from_index(), target);
  }

  // int64 to_index = 3;
  if (this->to_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_to_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  return target;
}

size_t FetchSingleLinkMessagesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (this->conversation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conversation_id());
  }

  // int64 from_index = 2;
  if (this->from_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from_index());
  }

  // int64 to_index = 3;
  if (this->to_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchSingleLinkMessagesReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchSingleLinkMessagesReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchSingleLinkMessagesReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.FetchSingleLinkMessagesReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.FetchSingleLinkMessagesReq)
    MergeFrom(*source);
  }
}

void FetchSingleLinkMessagesReq::MergeFrom(const FetchSingleLinkMessagesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.conversation_id().size() > 0) {
    _internal_set_conversation_id(from._internal_conversation_id());
  }
  if (from.from_index() != 0) {
    _internal_set_from_index(from._internal_from_index());
  }
  if (from.to_index() != 0) {
    _internal_set_to_index(from._internal_to_index());
  }
}

void FetchSingleLinkMessagesReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchSingleLinkMessagesReq::CopyFrom(const FetchSingleLinkMessagesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.FetchSingleLinkMessagesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSingleLinkMessagesReq::IsInitialized() const {
  return true;
}

void FetchSingleLinkMessagesReq::InternalSwap(FetchSingleLinkMessagesReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  conversation_id_.Swap(&other->conversation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchSingleLinkMessagesReq, to_index_)
      + sizeof(FetchSingleLinkMessagesReq::to_index_)
      - PROTOBUF_FIELD_OFFSET(FetchSingleLinkMessagesReq, from_index_)>(
          reinterpret_cast<char*>(&from_index_),
          reinterpret_cast<char*>(&other->from_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchSingleLinkMessagesReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchSingleLinkMessagesResp::InitAsDefaultInstance() {
  ::roc::im::sdk::net::_FetchSingleLinkMessagesResp_default_instance_._instance.get_mutable()->conversation_messages_ = const_cast< ::roc::im::sdk::net::ConversationMessages*>(
      ::roc::im::sdk::net::ConversationMessages::internal_default_instance());
}
class FetchSingleLinkMessagesResp::_Internal {
 public:
  static const ::roc::im::sdk::net::ConversationMessages& conversation_messages(const FetchSingleLinkMessagesResp* msg);
};

const ::roc::im::sdk::net::ConversationMessages&
FetchSingleLinkMessagesResp::_Internal::conversation_messages(const FetchSingleLinkMessagesResp* msg) {
  return *msg->conversation_messages_;
}
FetchSingleLinkMessagesResp::FetchSingleLinkMessagesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.FetchSingleLinkMessagesResp)
}
FetchSingleLinkMessagesResp::FetchSingleLinkMessagesResp(const FetchSingleLinkMessagesResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_conversation_messages()) {
    conversation_messages_ = new ::roc::im::sdk::net::ConversationMessages(*from.conversation_messages_);
  } else {
    conversation_messages_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.FetchSingleLinkMessagesResp)
}

void FetchSingleLinkMessagesResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchSingleLinkMessagesResp_im_2eproto.base);
  conversation_messages_ = nullptr;
}

FetchSingleLinkMessagesResp::~FetchSingleLinkMessagesResp() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchSingleLinkMessagesResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete conversation_messages_;
}

void FetchSingleLinkMessagesResp::ArenaDtor(void* object) {
  FetchSingleLinkMessagesResp* _this = reinterpret_cast< FetchSingleLinkMessagesResp* >(object);
  (void)_this;
}
void FetchSingleLinkMessagesResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchSingleLinkMessagesResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchSingleLinkMessagesResp& FetchSingleLinkMessagesResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchSingleLinkMessagesResp_im_2eproto.base);
  return *internal_default_instance();
}


void FetchSingleLinkMessagesResp::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && conversation_messages_ != nullptr) {
    delete conversation_messages_;
  }
  conversation_messages_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchSingleLinkMessagesResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conversation_messages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchSingleLinkMessagesResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  if (this->has_conversation_messages()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conversation_messages(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  return target;
}

size_t FetchSingleLinkMessagesResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  if (this->has_conversation_messages()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conversation_messages_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchSingleLinkMessagesResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchSingleLinkMessagesResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchSingleLinkMessagesResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.FetchSingleLinkMessagesResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.FetchSingleLinkMessagesResp)
    MergeFrom(*source);
  }
}

void FetchSingleLinkMessagesResp::MergeFrom(const FetchSingleLinkMessagesResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conversation_messages()) {
    _internal_mutable_conversation_messages()->::roc::im::sdk::net::ConversationMessages::MergeFrom(from._internal_conversation_messages());
  }
}

void FetchSingleLinkMessagesResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchSingleLinkMessagesResp::CopyFrom(const FetchSingleLinkMessagesResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.FetchSingleLinkMessagesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSingleLinkMessagesResp::IsInitialized() const {
  return true;
}

void FetchSingleLinkMessagesResp::InternalSwap(FetchSingleLinkMessagesResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(conversation_messages_, other->conversation_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchSingleLinkMessagesResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchMixedLinkMessagesReq::InitAsDefaultInstance() {
}
class FetchMixedLinkMessagesReq::_Internal {
 public:
};

FetchMixedLinkMessagesReq::FetchMixedLinkMessagesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conversation_id_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.FetchMixedLinkMessagesReq)
}
FetchMixedLinkMessagesReq::FetchMixedLinkMessagesReq(const FetchMixedLinkMessagesReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      conversation_id_arr_(from.conversation_id_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.FetchMixedLinkMessagesReq)
}

void FetchMixedLinkMessagesReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchMixedLinkMessagesReq_im_2eproto.base);
  count_ = PROTOBUF_LONGLONG(0);
}

FetchMixedLinkMessagesReq::~FetchMixedLinkMessagesReq() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchMixedLinkMessagesReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchMixedLinkMessagesReq::ArenaDtor(void* object) {
  FetchMixedLinkMessagesReq* _this = reinterpret_cast< FetchMixedLinkMessagesReq* >(object);
  (void)_this;
}
void FetchMixedLinkMessagesReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchMixedLinkMessagesReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchMixedLinkMessagesReq& FetchMixedLinkMessagesReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchMixedLinkMessagesReq_im_2eproto.base);
  return *internal_default_instance();
}


void FetchMixedLinkMessagesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conversation_id_arr_.Clear();
  count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchMixedLinkMessagesReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string conversation_id_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_conversation_id_arr();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchMixedLinkMessagesReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string conversation_id_arr = 1;
  for (int i = 0, n = this->_internal_conversation_id_arr_size(); i < n; i++) {
    const auto& s = this->_internal_conversation_id_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr");
    target = stream->WriteString(1, s, target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  return target;
}

size_t FetchMixedLinkMessagesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string conversation_id_arr = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(conversation_id_arr_.size());
  for (int i = 0, n = conversation_id_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      conversation_id_arr_.Get(i));
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchMixedLinkMessagesReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchMixedLinkMessagesReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchMixedLinkMessagesReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.FetchMixedLinkMessagesReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.FetchMixedLinkMessagesReq)
    MergeFrom(*source);
  }
}

void FetchMixedLinkMessagesReq::MergeFrom(const FetchMixedLinkMessagesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conversation_id_arr_.MergeFrom(from.conversation_id_arr_);
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void FetchMixedLinkMessagesReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchMixedLinkMessagesReq::CopyFrom(const FetchMixedLinkMessagesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.FetchMixedLinkMessagesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchMixedLinkMessagesReq::IsInitialized() const {
  return true;
}

void FetchMixedLinkMessagesReq::InternalSwap(FetchMixedLinkMessagesReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  conversation_id_arr_.InternalSwap(&other->conversation_id_arr_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchMixedLinkMessagesReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchMixedLinkMessagesResp::InitAsDefaultInstance() {
}
class FetchMixedLinkMessagesResp::_Internal {
 public:
};

FetchMixedLinkMessagesResp::FetchMixedLinkMessagesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conversation_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.FetchMixedLinkMessagesResp)
}
FetchMixedLinkMessagesResp::FetchMixedLinkMessagesResp(const FetchMixedLinkMessagesResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      conversation_messages_(from.conversation_messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.FetchMixedLinkMessagesResp)
}

void FetchMixedLinkMessagesResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchMixedLinkMessagesResp_im_2eproto.base);
}

FetchMixedLinkMessagesResp::~FetchMixedLinkMessagesResp() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchMixedLinkMessagesResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FetchMixedLinkMessagesResp::ArenaDtor(void* object) {
  FetchMixedLinkMessagesResp* _this = reinterpret_cast< FetchMixedLinkMessagesResp* >(object);
  (void)_this;
}
void FetchMixedLinkMessagesResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchMixedLinkMessagesResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchMixedLinkMessagesResp& FetchMixedLinkMessagesResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchMixedLinkMessagesResp_im_2eproto.base);
  return *internal_default_instance();
}


void FetchMixedLinkMessagesResp::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conversation_messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchMixedLinkMessagesResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conversation_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchMixedLinkMessagesResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conversation_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_conversation_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  return target;
}

size_t FetchMixedLinkMessagesResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  total_size += 1UL * this->_internal_conversation_messages_size();
  for (const auto& msg : this->conversation_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchMixedLinkMessagesResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchMixedLinkMessagesResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchMixedLinkMessagesResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.FetchMixedLinkMessagesResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.FetchMixedLinkMessagesResp)
    MergeFrom(*source);
  }
}

void FetchMixedLinkMessagesResp::MergeFrom(const FetchMixedLinkMessagesResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conversation_messages_.MergeFrom(from.conversation_messages_);
}

void FetchMixedLinkMessagesResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchMixedLinkMessagesResp::CopyFrom(const FetchMixedLinkMessagesResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.FetchMixedLinkMessagesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchMixedLinkMessagesResp::IsInitialized() const {
  return true;
}

void FetchMixedLinkMessagesResp::InternalSwap(FetchMixedLinkMessagesResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  conversation_messages_.InternalSwap(&other->conversation_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchMixedLinkMessagesResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendBatchMessageReq::InitAsDefaultInstance() {
}
class SendBatchMessageReq::_Internal {
 public:
};

SendBatchMessageReq::SendBatchMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.SendBatchMessageReq)
}
SendBatchMessageReq::SendBatchMessageReq(const SendBatchMessageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      message_arr_(from.message_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.SendBatchMessageReq)
}

void SendBatchMessageReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendBatchMessageReq_im_2eproto.base);
}

SendBatchMessageReq::~SendBatchMessageReq() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.SendBatchMessageReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendBatchMessageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SendBatchMessageReq::ArenaDtor(void* object) {
  SendBatchMessageReq* _this = reinterpret_cast< SendBatchMessageReq* >(object);
  (void)_this;
}
void SendBatchMessageReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendBatchMessageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendBatchMessageReq& SendBatchMessageReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendBatchMessageReq_im_2eproto.base);
  return *internal_default_instance();
}


void SendBatchMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.SendBatchMessageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendBatchMessageReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .roc.im.sdk.net.Message message_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendBatchMessageReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.SendBatchMessageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.Message message_arr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_arr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_message_arr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.SendBatchMessageReq)
  return target;
}

size_t SendBatchMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.SendBatchMessageReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.Message message_arr = 1;
  total_size += 1UL * this->_internal_message_arr_size();
  for (const auto& msg : this->message_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendBatchMessageReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.SendBatchMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SendBatchMessageReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendBatchMessageReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.SendBatchMessageReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.SendBatchMessageReq)
    MergeFrom(*source);
  }
}

void SendBatchMessageReq::MergeFrom(const SendBatchMessageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.SendBatchMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_arr_.MergeFrom(from.message_arr_);
}

void SendBatchMessageReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.SendBatchMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBatchMessageReq::CopyFrom(const SendBatchMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.SendBatchMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBatchMessageReq::IsInitialized() const {
  return true;
}

void SendBatchMessageReq::InternalSwap(SendBatchMessageReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_arr_.InternalSwap(&other->message_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendBatchMessageReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendBatchMessageResp::InitAsDefaultInstance() {
}
class SendBatchMessageResp::_Internal {
 public:
};

SendBatchMessageResp::SendBatchMessageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  send_message_response_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.SendBatchMessageResp)
}
SendBatchMessageResp::SendBatchMessageResp(const SendBatchMessageResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      send_message_response_arr_(from.send_message_response_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.SendBatchMessageResp)
}

void SendBatchMessageResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendBatchMessageResp_im_2eproto.base);
}

SendBatchMessageResp::~SendBatchMessageResp() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.SendBatchMessageResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendBatchMessageResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SendBatchMessageResp::ArenaDtor(void* object) {
  SendBatchMessageResp* _this = reinterpret_cast< SendBatchMessageResp* >(object);
  (void)_this;
}
void SendBatchMessageResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendBatchMessageResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendBatchMessageResp& SendBatchMessageResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendBatchMessageResp_im_2eproto.base);
  return *internal_default_instance();
}


void SendBatchMessageResp::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.SendBatchMessageResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_message_response_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendBatchMessageResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .roc.im.sdk.net.SendBatchMessageResp send_message_response_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_send_message_response_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendBatchMessageResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.SendBatchMessageResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.SendBatchMessageResp send_message_response_arr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_send_message_response_arr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_send_message_response_arr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.SendBatchMessageResp)
  return target;
}

size_t SendBatchMessageResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.SendBatchMessageResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.SendBatchMessageResp send_message_response_arr = 1;
  total_size += 1UL * this->_internal_send_message_response_arr_size();
  for (const auto& msg : this->send_message_response_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendBatchMessageResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.SendBatchMessageResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SendBatchMessageResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendBatchMessageResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.SendBatchMessageResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.SendBatchMessageResp)
    MergeFrom(*source);
  }
}

void SendBatchMessageResp::MergeFrom(const SendBatchMessageResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.SendBatchMessageResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  send_message_response_arr_.MergeFrom(from.send_message_response_arr_);
}

void SendBatchMessageResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.SendBatchMessageResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBatchMessageResp::CopyFrom(const SendBatchMessageResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.SendBatchMessageResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBatchMessageResp::IsInitialized() const {
  return true;
}

void SendBatchMessageResp::InternalSwap(SendBatchMessageResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  send_message_response_arr_.InternalSwap(&other->send_message_response_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendBatchMessageResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PushMessages::InitAsDefaultInstance() {
}
class PushMessages::_Internal {
 public:
};

PushMessages::PushMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  push_message_arr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.PushMessages)
}
PushMessages::PushMessages(const PushMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      push_message_arr_(from.push_message_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.PushMessages)
}

void PushMessages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushMessages_im_2eproto.base);
}

PushMessages::~PushMessages() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.PushMessages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PushMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PushMessages::ArenaDtor(void* object) {
  PushMessages* _this = reinterpret_cast< PushMessages* >(object);
  (void)_this;
}
void PushMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushMessages& PushMessages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushMessages_im_2eproto.base);
  return *internal_default_instance();
}


void PushMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.PushMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  push_message_arr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .roc.im.sdk.net.Message push_message_arr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_push_message_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushMessages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.PushMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.Message push_message_arr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_push_message_arr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_push_message_arr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.PushMessages)
  return target;
}

size_t PushMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.PushMessages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .roc.im.sdk.net.Message push_message_arr = 1;
  total_size += 1UL * this->_internal_push_message_arr_size();
  for (const auto& msg : this->push_message_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushMessages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.PushMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const PushMessages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushMessages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.PushMessages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.PushMessages)
    MergeFrom(*source);
  }
}

void PushMessages::MergeFrom(const PushMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.PushMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  push_message_arr_.MergeFrom(from.push_message_arr_);
}

void PushMessages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.PushMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMessages::CopyFrom(const PushMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.PushMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMessages::IsInitialized() const {
  return true;
}

void PushMessages::InternalSwap(PushMessages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  push_message_arr_.InternalSwap(&other->push_message_arr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushMessages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestBody::InitAsDefaultInstance() {
  ::roc::im::sdk::net::_RequestBody_default_instance_._instance.get_mutable()->fetch_mixed_link_messages_request_ = const_cast< ::roc::im::sdk::net::FetchMixedLinkMessagesReq*>(
      ::roc::im::sdk::net::FetchMixedLinkMessagesReq::internal_default_instance());
  ::roc::im::sdk::net::_RequestBody_default_instance_._instance.get_mutable()->fetch_single_link_messages_request_ = const_cast< ::roc::im::sdk::net::FetchSingleLinkMessagesReq*>(
      ::roc::im::sdk::net::FetchSingleLinkMessagesReq::internal_default_instance());
  ::roc::im::sdk::net::_RequestBody_default_instance_._instance.get_mutable()->send_batch_messages_request_ = const_cast< ::roc::im::sdk::net::SendBatchMessageReq*>(
      ::roc::im::sdk::net::SendBatchMessageReq::internal_default_instance());
}
class RequestBody::_Internal {
 public:
  static const ::roc::im::sdk::net::FetchMixedLinkMessagesReq& fetch_mixed_link_messages_request(const RequestBody* msg);
  static const ::roc::im::sdk::net::FetchSingleLinkMessagesReq& fetch_single_link_messages_request(const RequestBody* msg);
  static const ::roc::im::sdk::net::SendBatchMessageReq& send_batch_messages_request(const RequestBody* msg);
};

const ::roc::im::sdk::net::FetchMixedLinkMessagesReq&
RequestBody::_Internal::fetch_mixed_link_messages_request(const RequestBody* msg) {
  return *msg->fetch_mixed_link_messages_request_;
}
const ::roc::im::sdk::net::FetchSingleLinkMessagesReq&
RequestBody::_Internal::fetch_single_link_messages_request(const RequestBody* msg) {
  return *msg->fetch_single_link_messages_request_;
}
const ::roc::im::sdk::net::SendBatchMessageReq&
RequestBody::_Internal::send_batch_messages_request(const RequestBody* msg) {
  return *msg->send_batch_messages_request_;
}
RequestBody::RequestBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.RequestBody)
}
RequestBody::RequestBody(const RequestBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  if (from._internal_has_fetch_mixed_link_messages_request()) {
    fetch_mixed_link_messages_request_ = new ::roc::im::sdk::net::FetchMixedLinkMessagesReq(*from.fetch_mixed_link_messages_request_);
  } else {
    fetch_mixed_link_messages_request_ = nullptr;
  }
  if (from._internal_has_fetch_single_link_messages_request()) {
    fetch_single_link_messages_request_ = new ::roc::im::sdk::net::FetchSingleLinkMessagesReq(*from.fetch_single_link_messages_request_);
  } else {
    fetch_single_link_messages_request_ = nullptr;
  }
  if (from._internal_has_send_batch_messages_request()) {
    send_batch_messages_request_ = new ::roc::im::sdk::net::SendBatchMessageReq(*from.send_batch_messages_request_);
  } else {
    send_batch_messages_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.RequestBody)
}

void RequestBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestBody_im_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fetch_mixed_link_messages_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_batch_messages_request_) -
      reinterpret_cast<char*>(&fetch_mixed_link_messages_request_)) + sizeof(send_batch_messages_request_));
}

RequestBody::~RequestBody() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.RequestBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fetch_mixed_link_messages_request_;
  if (this != internal_default_instance()) delete fetch_single_link_messages_request_;
  if (this != internal_default_instance()) delete send_batch_messages_request_;
}

void RequestBody::ArenaDtor(void* object) {
  RequestBody* _this = reinterpret_cast< RequestBody* >(object);
  (void)_this;
}
void RequestBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestBody& RequestBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestBody_im_2eproto.base);
  return *internal_default_instance();
}


void RequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.RequestBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && fetch_mixed_link_messages_request_ != nullptr) {
    delete fetch_mixed_link_messages_request_;
  }
  fetch_mixed_link_messages_request_ = nullptr;
  if (GetArena() == nullptr && fetch_single_link_messages_request_ != nullptr) {
    delete fetch_single_link_messages_request_;
  }
  fetch_single_link_messages_request_ = nullptr;
  if (GetArena() == nullptr && send_batch_messages_request_ != nullptr) {
    delete send_batch_messages_request_;
  }
  send_batch_messages_request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "roc.im.sdk.net.RequestBody.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .roc.im.sdk.net.FetchMixedLinkMessagesReq fetch_mixed_link_messages_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_mixed_link_messages_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .roc.im.sdk.net.FetchSingleLinkMessagesReq fetch_single_link_messages_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_single_link_messages_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .roc.im.sdk.net.SendBatchMessageReq send_batch_messages_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_batch_messages_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.RequestBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.RequestBody.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .roc.im.sdk.net.FetchMixedLinkMessagesReq fetch_mixed_link_messages_request = 2;
  if (this->has_fetch_mixed_link_messages_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fetch_mixed_link_messages_request(this), target, stream);
  }

  // .roc.im.sdk.net.FetchSingleLinkMessagesReq fetch_single_link_messages_request = 3;
  if (this->has_fetch_single_link_messages_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fetch_single_link_messages_request(this), target, stream);
  }

  // .roc.im.sdk.net.SendBatchMessageReq send_batch_messages_request = 4;
  if (this->has_send_batch_messages_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::send_batch_messages_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.RequestBody)
  return target;
}

size_t RequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.RequestBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .roc.im.sdk.net.FetchMixedLinkMessagesReq fetch_mixed_link_messages_request = 2;
  if (this->has_fetch_mixed_link_messages_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fetch_mixed_link_messages_request_);
  }

  // .roc.im.sdk.net.FetchSingleLinkMessagesReq fetch_single_link_messages_request = 3;
  if (this->has_fetch_single_link_messages_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fetch_single_link_messages_request_);
  }

  // .roc.im.sdk.net.SendBatchMessageReq send_batch_messages_request = 4;
  if (this->has_send_batch_messages_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_batch_messages_request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.RequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.RequestBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.RequestBody)
    MergeFrom(*source);
  }
}

void RequestBody::MergeFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.RequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.has_fetch_mixed_link_messages_request()) {
    _internal_mutable_fetch_mixed_link_messages_request()->::roc::im::sdk::net::FetchMixedLinkMessagesReq::MergeFrom(from._internal_fetch_mixed_link_messages_request());
  }
  if (from.has_fetch_single_link_messages_request()) {
    _internal_mutable_fetch_single_link_messages_request()->::roc::im::sdk::net::FetchSingleLinkMessagesReq::MergeFrom(from._internal_fetch_single_link_messages_request());
  }
  if (from.has_send_batch_messages_request()) {
    _internal_mutable_send_batch_messages_request()->::roc::im::sdk::net::SendBatchMessageReq::MergeFrom(from._internal_send_batch_messages_request());
  }
}

void RequestBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBody::CopyFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBody::IsInitialized() const {
  return true;
}

void RequestBody::InternalSwap(RequestBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBody, send_batch_messages_request_)
      + sizeof(RequestBody::send_batch_messages_request_)
      - PROTOBUF_FIELD_OFFSET(RequestBody, fetch_mixed_link_messages_request_)>(
          reinterpret_cast<char*>(&fetch_mixed_link_messages_request_),
          reinterpret_cast<char*>(&other->fetch_mixed_link_messages_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseBody::InitAsDefaultInstance() {
  ::roc::im::sdk::net::_ResponseBody_default_instance_._instance.get_mutable()->fetch_mixed_link_messages_response_ = const_cast< ::roc::im::sdk::net::FetchMixedLinkMessagesResp*>(
      ::roc::im::sdk::net::FetchMixedLinkMessagesResp::internal_default_instance());
  ::roc::im::sdk::net::_ResponseBody_default_instance_._instance.get_mutable()->fetch_single_link_messages_response_ = const_cast< ::roc::im::sdk::net::FetchSingleLinkMessagesResp*>(
      ::roc::im::sdk::net::FetchSingleLinkMessagesResp::internal_default_instance());
  ::roc::im::sdk::net::_ResponseBody_default_instance_._instance.get_mutable()->send_batch_messages_response_ = const_cast< ::roc::im::sdk::net::SendBatchMessageResp*>(
      ::roc::im::sdk::net::SendBatchMessageResp::internal_default_instance());
  ::roc::im::sdk::net::_ResponseBody_default_instance_._instance.get_mutable()->push_message_ = const_cast< ::roc::im::sdk::net::PushMessages*>(
      ::roc::im::sdk::net::PushMessages::internal_default_instance());
}
class ResponseBody::_Internal {
 public:
  static const ::roc::im::sdk::net::FetchMixedLinkMessagesResp& fetch_mixed_link_messages_response(const ResponseBody* msg);
  static const ::roc::im::sdk::net::FetchSingleLinkMessagesResp& fetch_single_link_messages_response(const ResponseBody* msg);
  static const ::roc::im::sdk::net::SendBatchMessageResp& send_batch_messages_response(const ResponseBody* msg);
  static const ::roc::im::sdk::net::PushMessages& push_message(const ResponseBody* msg);
};

const ::roc::im::sdk::net::FetchMixedLinkMessagesResp&
ResponseBody::_Internal::fetch_mixed_link_messages_response(const ResponseBody* msg) {
  return *msg->fetch_mixed_link_messages_response_;
}
const ::roc::im::sdk::net::FetchSingleLinkMessagesResp&
ResponseBody::_Internal::fetch_single_link_messages_response(const ResponseBody* msg) {
  return *msg->fetch_single_link_messages_response_;
}
const ::roc::im::sdk::net::SendBatchMessageResp&
ResponseBody::_Internal::send_batch_messages_response(const ResponseBody* msg) {
  return *msg->send_batch_messages_response_;
}
const ::roc::im::sdk::net::PushMessages&
ResponseBody::_Internal::push_message(const ResponseBody* msg) {
  return *msg->push_message_;
}
ResponseBody::ResponseBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:roc.im.sdk.net.ResponseBody)
}
ResponseBody::ResponseBody(const ResponseBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_id().empty()) {
    response_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_response_id(),
      GetArena());
  }
  if (from._internal_has_fetch_mixed_link_messages_response()) {
    fetch_mixed_link_messages_response_ = new ::roc::im::sdk::net::FetchMixedLinkMessagesResp(*from.fetch_mixed_link_messages_response_);
  } else {
    fetch_mixed_link_messages_response_ = nullptr;
  }
  if (from._internal_has_fetch_single_link_messages_response()) {
    fetch_single_link_messages_response_ = new ::roc::im::sdk::net::FetchSingleLinkMessagesResp(*from.fetch_single_link_messages_response_);
  } else {
    fetch_single_link_messages_response_ = nullptr;
  }
  if (from._internal_has_send_batch_messages_response()) {
    send_batch_messages_response_ = new ::roc::im::sdk::net::SendBatchMessageResp(*from.send_batch_messages_response_);
  } else {
    send_batch_messages_response_ = nullptr;
  }
  if (from._internal_has_push_message()) {
    push_message_ = new ::roc::im::sdk::net::PushMessages(*from.push_message_);
  } else {
    push_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:roc.im.sdk.net.ResponseBody)
}

void ResponseBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseBody_im_2eproto.base);
  response_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fetch_mixed_link_messages_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&push_message_) -
      reinterpret_cast<char*>(&fetch_mixed_link_messages_response_)) + sizeof(push_message_));
}

ResponseBody::~ResponseBody() {
  // @@protoc_insertion_point(destructor:roc.im.sdk.net.ResponseBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fetch_mixed_link_messages_response_;
  if (this != internal_default_instance()) delete fetch_single_link_messages_response_;
  if (this != internal_default_instance()) delete send_batch_messages_response_;
  if (this != internal_default_instance()) delete push_message_;
}

void ResponseBody::ArenaDtor(void* object) {
  ResponseBody* _this = reinterpret_cast< ResponseBody* >(object);
  (void)_this;
}
void ResponseBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseBody& ResponseBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseBody_im_2eproto.base);
  return *internal_default_instance();
}


void ResponseBody::Clear() {
// @@protoc_insertion_point(message_clear_start:roc.im.sdk.net.ResponseBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && fetch_mixed_link_messages_response_ != nullptr) {
    delete fetch_mixed_link_messages_response_;
  }
  fetch_mixed_link_messages_response_ = nullptr;
  if (GetArena() == nullptr && fetch_single_link_messages_response_ != nullptr) {
    delete fetch_single_link_messages_response_;
  }
  fetch_single_link_messages_response_ = nullptr;
  if (GetArena() == nullptr && send_batch_messages_response_ != nullptr) {
    delete send_batch_messages_response_;
  }
  send_batch_messages_response_ = nullptr;
  if (GetArena() == nullptr && push_message_ != nullptr) {
    delete push_message_;
  }
  push_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "roc.im.sdk.net.ResponseBody.response_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .roc.im.sdk.net.FetchMixedLinkMessagesResp fetch_mixed_link_messages_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_mixed_link_messages_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .roc.im.sdk.net.FetchSingleLinkMessagesResp fetch_single_link_messages_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fetch_single_link_messages_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .roc.im.sdk.net.SendBatchMessageResp send_batch_messages_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_batch_messages_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .roc.im.sdk.net.PushMessages push_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_push_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:roc.im.sdk.net.ResponseBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response_id = 1;
  if (this->response_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_id().data(), static_cast<int>(this->_internal_response_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "roc.im.sdk.net.ResponseBody.response_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response_id(), target);
  }

  // .roc.im.sdk.net.FetchMixedLinkMessagesResp fetch_mixed_link_messages_response = 2;
  if (this->has_fetch_mixed_link_messages_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fetch_mixed_link_messages_response(this), target, stream);
  }

  // .roc.im.sdk.net.FetchSingleLinkMessagesResp fetch_single_link_messages_response = 3;
  if (this->has_fetch_single_link_messages_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fetch_single_link_messages_response(this), target, stream);
  }

  // .roc.im.sdk.net.SendBatchMessageResp send_batch_messages_response = 4;
  if (this->has_send_batch_messages_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::send_batch_messages_response(this), target, stream);
  }

  // .roc.im.sdk.net.PushMessages push_message = 5;
  if (this->has_push_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::push_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roc.im.sdk.net.ResponseBody)
  return target;
}

size_t ResponseBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:roc.im.sdk.net.ResponseBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_id = 1;
  if (this->response_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_id());
  }

  // .roc.im.sdk.net.FetchMixedLinkMessagesResp fetch_mixed_link_messages_response = 2;
  if (this->has_fetch_mixed_link_messages_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fetch_mixed_link_messages_response_);
  }

  // .roc.im.sdk.net.FetchSingleLinkMessagesResp fetch_single_link_messages_response = 3;
  if (this->has_fetch_single_link_messages_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fetch_single_link_messages_response_);
  }

  // .roc.im.sdk.net.SendBatchMessageResp send_batch_messages_response = 4;
  if (this->has_send_batch_messages_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_batch_messages_response_);
  }

  // .roc.im.sdk.net.PushMessages push_message = 5;
  if (this->has_push_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *push_message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roc.im.sdk.net.ResponseBody)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roc.im.sdk.net.ResponseBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roc.im.sdk.net.ResponseBody)
    MergeFrom(*source);
  }
}

void ResponseBody::MergeFrom(const ResponseBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roc.im.sdk.net.ResponseBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_id().size() > 0) {
    _internal_set_response_id(from._internal_response_id());
  }
  if (from.has_fetch_mixed_link_messages_response()) {
    _internal_mutable_fetch_mixed_link_messages_response()->::roc::im::sdk::net::FetchMixedLinkMessagesResp::MergeFrom(from._internal_fetch_mixed_link_messages_response());
  }
  if (from.has_fetch_single_link_messages_response()) {
    _internal_mutable_fetch_single_link_messages_response()->::roc::im::sdk::net::FetchSingleLinkMessagesResp::MergeFrom(from._internal_fetch_single_link_messages_response());
  }
  if (from.has_send_batch_messages_response()) {
    _internal_mutable_send_batch_messages_response()->::roc::im::sdk::net::SendBatchMessageResp::MergeFrom(from._internal_send_batch_messages_response());
  }
  if (from.has_push_message()) {
    _internal_mutable_push_message()->::roc::im::sdk::net::PushMessages::MergeFrom(from._internal_push_message());
  }
}

void ResponseBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roc.im.sdk.net.ResponseBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBody::CopyFrom(const ResponseBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roc.im.sdk.net.ResponseBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBody::IsInitialized() const {
  return true;
}

void ResponseBody::InternalSwap(ResponseBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_id_.Swap(&other->response_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseBody, push_message_)
      + sizeof(ResponseBody::push_message_)
      - PROTOBUF_FIELD_OFFSET(ResponseBody, fetch_mixed_link_messages_response_)>(
          reinterpret_cast<char*>(&fetch_mixed_link_messages_response_),
          reinterpret_cast<char*>(&other->fetch_mixed_link_messages_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseBody::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace sdk
}  // namespace im
}  // namespace roc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse* Arena::CreateMaybeMessage< ::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::Conversation* Arena::CreateMaybeMessage< ::roc::im::sdk::net::Conversation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::Conversation >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::Message_ExtEntry_DoNotUse* Arena::CreateMaybeMessage< ::roc::im::sdk::net::Message_ExtEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::Message_ExtEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::Message* Arena::CreateMaybeMessage< ::roc::im::sdk::net::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::ConversationMessages* Arena::CreateMaybeMessage< ::roc::im::sdk::net::ConversationMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::ConversationMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::FetchSingleLinkMessagesReq* Arena::CreateMaybeMessage< ::roc::im::sdk::net::FetchSingleLinkMessagesReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::FetchSingleLinkMessagesReq >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::FetchSingleLinkMessagesResp* Arena::CreateMaybeMessage< ::roc::im::sdk::net::FetchSingleLinkMessagesResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::FetchSingleLinkMessagesResp >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::FetchMixedLinkMessagesReq* Arena::CreateMaybeMessage< ::roc::im::sdk::net::FetchMixedLinkMessagesReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::FetchMixedLinkMessagesReq >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::FetchMixedLinkMessagesResp* Arena::CreateMaybeMessage< ::roc::im::sdk::net::FetchMixedLinkMessagesResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::FetchMixedLinkMessagesResp >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::SendBatchMessageReq* Arena::CreateMaybeMessage< ::roc::im::sdk::net::SendBatchMessageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::SendBatchMessageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::SendBatchMessageResp* Arena::CreateMaybeMessage< ::roc::im::sdk::net::SendBatchMessageResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::SendBatchMessageResp >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::PushMessages* Arena::CreateMaybeMessage< ::roc::im::sdk::net::PushMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::PushMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::RequestBody* Arena::CreateMaybeMessage< ::roc::im::sdk::net::RequestBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::RequestBody >(arena);
}
template<> PROTOBUF_NOINLINE ::roc::im::sdk::net::ResponseBody* Arena::CreateMaybeMessage< ::roc::im::sdk::net::ResponseBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::roc::im::sdk::net::ResponseBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
