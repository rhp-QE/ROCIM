// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_im_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_im_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_im_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_im_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_im_2eproto;
namespace roc {
namespace im {
namespace sdk {
namespace net {
class Conversation;
class ConversationDefaultTypeInternal;
extern ConversationDefaultTypeInternal _Conversation_default_instance_;
class ConversationMessages;
class ConversationMessagesDefaultTypeInternal;
extern ConversationMessagesDefaultTypeInternal _ConversationMessages_default_instance_;
class Conversation_ExtEntry_DoNotUse;
class Conversation_ExtEntry_DoNotUseDefaultTypeInternal;
extern Conversation_ExtEntry_DoNotUseDefaultTypeInternal _Conversation_ExtEntry_DoNotUse_default_instance_;
class FetchMixedLinkMessagesReq;
class FetchMixedLinkMessagesReqDefaultTypeInternal;
extern FetchMixedLinkMessagesReqDefaultTypeInternal _FetchMixedLinkMessagesReq_default_instance_;
class FetchMixedLinkMessagesResp;
class FetchMixedLinkMessagesRespDefaultTypeInternal;
extern FetchMixedLinkMessagesRespDefaultTypeInternal _FetchMixedLinkMessagesResp_default_instance_;
class FetchSingleLinkMessagesReq;
class FetchSingleLinkMessagesReqDefaultTypeInternal;
extern FetchSingleLinkMessagesReqDefaultTypeInternal _FetchSingleLinkMessagesReq_default_instance_;
class FetchSingleLinkMessagesResp;
class FetchSingleLinkMessagesRespDefaultTypeInternal;
extern FetchSingleLinkMessagesRespDefaultTypeInternal _FetchSingleLinkMessagesResp_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_ExtEntry_DoNotUse;
class Message_ExtEntry_DoNotUseDefaultTypeInternal;
extern Message_ExtEntry_DoNotUseDefaultTypeInternal _Message_ExtEntry_DoNotUse_default_instance_;
class PushMessages;
class PushMessagesDefaultTypeInternal;
extern PushMessagesDefaultTypeInternal _PushMessages_default_instance_;
class RequestBody;
class RequestBodyDefaultTypeInternal;
extern RequestBodyDefaultTypeInternal _RequestBody_default_instance_;
class ResponseBody;
class ResponseBodyDefaultTypeInternal;
extern ResponseBodyDefaultTypeInternal _ResponseBody_default_instance_;
class SendBatchMessageReq;
class SendBatchMessageReqDefaultTypeInternal;
extern SendBatchMessageReqDefaultTypeInternal _SendBatchMessageReq_default_instance_;
class SendBatchMessageResp;
class SendBatchMessageRespDefaultTypeInternal;
extern SendBatchMessageRespDefaultTypeInternal _SendBatchMessageResp_default_instance_;
}  // namespace net
}  // namespace sdk
}  // namespace im
}  // namespace roc
PROTOBUF_NAMESPACE_OPEN
template<> ::roc::im::sdk::net::Conversation* Arena::CreateMaybeMessage<::roc::im::sdk::net::Conversation>(Arena*);
template<> ::roc::im::sdk::net::ConversationMessages* Arena::CreateMaybeMessage<::roc::im::sdk::net::ConversationMessages>(Arena*);
template<> ::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse* Arena::CreateMaybeMessage<::roc::im::sdk::net::Conversation_ExtEntry_DoNotUse>(Arena*);
template<> ::roc::im::sdk::net::FetchMixedLinkMessagesReq* Arena::CreateMaybeMessage<::roc::im::sdk::net::FetchMixedLinkMessagesReq>(Arena*);
template<> ::roc::im::sdk::net::FetchMixedLinkMessagesResp* Arena::CreateMaybeMessage<::roc::im::sdk::net::FetchMixedLinkMessagesResp>(Arena*);
template<> ::roc::im::sdk::net::FetchSingleLinkMessagesReq* Arena::CreateMaybeMessage<::roc::im::sdk::net::FetchSingleLinkMessagesReq>(Arena*);
template<> ::roc::im::sdk::net::FetchSingleLinkMessagesResp* Arena::CreateMaybeMessage<::roc::im::sdk::net::FetchSingleLinkMessagesResp>(Arena*);
template<> ::roc::im::sdk::net::Message* Arena::CreateMaybeMessage<::roc::im::sdk::net::Message>(Arena*);
template<> ::roc::im::sdk::net::Message_ExtEntry_DoNotUse* Arena::CreateMaybeMessage<::roc::im::sdk::net::Message_ExtEntry_DoNotUse>(Arena*);
template<> ::roc::im::sdk::net::PushMessages* Arena::CreateMaybeMessage<::roc::im::sdk::net::PushMessages>(Arena*);
template<> ::roc::im::sdk::net::RequestBody* Arena::CreateMaybeMessage<::roc::im::sdk::net::RequestBody>(Arena*);
template<> ::roc::im::sdk::net::ResponseBody* Arena::CreateMaybeMessage<::roc::im::sdk::net::ResponseBody>(Arena*);
template<> ::roc::im::sdk::net::SendBatchMessageReq* Arena::CreateMaybeMessage<::roc::im::sdk::net::SendBatchMessageReq>(Arena*);
template<> ::roc::im::sdk::net::SendBatchMessageResp* Arena::CreateMaybeMessage<::roc::im::sdk::net::SendBatchMessageResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace roc {
namespace im {
namespace sdk {
namespace net {

// ===================================================================

class Conversation_ExtEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Conversation_ExtEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Conversation_ExtEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Conversation_ExtEntry_DoNotUse();
  Conversation_ExtEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Conversation_ExtEntry_DoNotUse& other);
  static const Conversation_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Conversation_ExtEntry_DoNotUse*>(&_Conversation_ExtEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "roc.im.sdk.net.Conversation.ExtEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "roc.im.sdk.net.Conversation.ExtEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Conversation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.Conversation) */ {
 public:
  inline Conversation() : Conversation(nullptr) {};
  virtual ~Conversation();

  Conversation(const Conversation& from);
  Conversation(Conversation&& from) noexcept
    : Conversation() {
    *this = ::std::move(from);
  }

  inline Conversation& operator=(const Conversation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conversation& operator=(Conversation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Conversation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conversation* internal_default_instance() {
    return reinterpret_cast<const Conversation*>(
               &_Conversation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Conversation& a, Conversation& b) {
    a.Swap(&b);
  }
  inline void Swap(Conversation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conversation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conversation* New() const final {
    return CreateMaybeMessage<Conversation>(nullptr);
  }

  Conversation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conversation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Conversation& from);
  void MergeFrom(const Conversation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conversation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.Conversation";
  }
  protected:
  explicit Conversation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtFieldNumber = 3,
    kConvertsionIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // map<string, string> ext = 3;
  int ext_size() const;
  private:
  int _internal_ext_size() const;
  public:
  void clear_ext();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_ext() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_ext();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      ext() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_ext();

  // string convertsion_id = 1;
  void clear_convertsion_id();
  const std::string& convertsion_id() const;
  void set_convertsion_id(const std::string& value);
  void set_convertsion_id(std::string&& value);
  void set_convertsion_id(const char* value);
  void set_convertsion_id(const char* value, size_t size);
  std::string* mutable_convertsion_id();
  std::string* release_convertsion_id();
  void set_allocated_convertsion_id(std::string* convertsion_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_convertsion_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_convertsion_id(
      std::string* convertsion_id);
  private:
  const std::string& _internal_convertsion_id() const;
  void _internal_set_convertsion_id(const std::string& value);
  std::string* _internal_mutable_convertsion_id();
  public:

  // string owner_id = 2;
  void clear_owner_id();
  const std::string& owner_id() const;
  void set_owner_id(const std::string& value);
  void set_owner_id(std::string&& value);
  void set_owner_id(const char* value);
  void set_owner_id(const char* value, size_t size);
  std::string* mutable_owner_id();
  std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_owner_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_owner_id(
      std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.Conversation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Conversation_ExtEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > ext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr convertsion_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class Message_ExtEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Message_ExtEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Message_ExtEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Message_ExtEntry_DoNotUse();
  Message_ExtEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Message_ExtEntry_DoNotUse& other);
  static const Message_ExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Message_ExtEntry_DoNotUse*>(&_Message_ExtEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "roc.im.sdk.net.Message.ExtEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "roc.im.sdk.net.Message.ExtEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtFieldNumber = 3,
    kMessageIdFieldNumber = 1,
    kContentFieldNumber = 2,
    kSenderIdFieldNumber = 4,
    kConvertsionIdFieldNumber = 5,
    kMessageTypeFieldNumber = 6,
    kIndexFieldNumber = 7,
  };
  // map<string, string> ext = 3;
  int ext_size() const;
  private:
  int _internal_ext_size() const;
  public:
  void clear_ext();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_ext() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_ext();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      ext() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_ext();

  // string message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_id(
      std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string sender_id = 4;
  void clear_sender_id();
  const std::string& sender_id() const;
  void set_sender_id(const std::string& value);
  void set_sender_id(std::string&& value);
  void set_sender_id(const char* value);
  void set_sender_id(const char* value, size_t size);
  std::string* mutable_sender_id();
  std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sender_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sender_id(
      std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // string convertsion_id = 5;
  void clear_convertsion_id();
  const std::string& convertsion_id() const;
  void set_convertsion_id(const std::string& value);
  void set_convertsion_id(std::string&& value);
  void set_convertsion_id(const char* value);
  void set_convertsion_id(const char* value, size_t size);
  std::string* mutable_convertsion_id();
  std::string* release_convertsion_id();
  void set_allocated_convertsion_id(std::string* convertsion_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_convertsion_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_convertsion_id(
      std::string* convertsion_id);
  private:
  const std::string& _internal_convertsion_id() const;
  void _internal_set_convertsion_id(const std::string& value);
  std::string* _internal_mutable_convertsion_id();
  public:

  // int64 message_type = 6;
  void clear_message_type();
  ::PROTOBUF_NAMESPACE_ID::int64 message_type() const;
  void set_message_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_type() const;
  void _internal_set_message_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 index = 7;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Message_ExtEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > ext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr convertsion_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 message_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class ConversationMessages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.ConversationMessages) */ {
 public:
  inline ConversationMessages() : ConversationMessages(nullptr) {};
  virtual ~ConversationMessages();

  ConversationMessages(const ConversationMessages& from);
  ConversationMessages(ConversationMessages&& from) noexcept
    : ConversationMessages() {
    *this = ::std::move(from);
  }

  inline ConversationMessages& operator=(const ConversationMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConversationMessages& operator=(ConversationMessages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConversationMessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConversationMessages* internal_default_instance() {
    return reinterpret_cast<const ConversationMessages*>(
               &_ConversationMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConversationMessages& a, ConversationMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(ConversationMessages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConversationMessages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConversationMessages* New() const final {
    return CreateMaybeMessage<ConversationMessages>(nullptr);
  }

  ConversationMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConversationMessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConversationMessages& from);
  void MergeFrom(const ConversationMessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConversationMessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.ConversationMessages";
  }
  protected:
  explicit ConversationMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageArrFieldNumber = 2,
    kConversationIdFieldNumber = 1,
  };
  // repeated .roc.im.sdk.net.Message message_arr = 2;
  int message_arr_size() const;
  private:
  int _internal_message_arr_size() const;
  public:
  void clear_message_arr();
  ::roc::im::sdk::net::Message* mutable_message_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >*
      mutable_message_arr();
  private:
  const ::roc::im::sdk::net::Message& _internal_message_arr(int index) const;
  ::roc::im::sdk::net::Message* _internal_add_message_arr();
  public:
  const ::roc::im::sdk::net::Message& message_arr(int index) const;
  ::roc::im::sdk::net::Message* add_message_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >&
      message_arr() const;

  // string conversation_id = 1;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  void set_conversation_id(const std::string& value);
  void set_conversation_id(std::string&& value);
  void set_conversation_id(const char* value);
  void set_conversation_id(const char* value, size_t size);
  std::string* mutable_conversation_id();
  std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_conversation_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_conversation_id(
      std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.ConversationMessages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message > message_arr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class FetchSingleLinkMessagesReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.FetchSingleLinkMessagesReq) */ {
 public:
  inline FetchSingleLinkMessagesReq() : FetchSingleLinkMessagesReq(nullptr) {};
  virtual ~FetchSingleLinkMessagesReq();

  FetchSingleLinkMessagesReq(const FetchSingleLinkMessagesReq& from);
  FetchSingleLinkMessagesReq(FetchSingleLinkMessagesReq&& from) noexcept
    : FetchSingleLinkMessagesReq() {
    *this = ::std::move(from);
  }

  inline FetchSingleLinkMessagesReq& operator=(const FetchSingleLinkMessagesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchSingleLinkMessagesReq& operator=(FetchSingleLinkMessagesReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchSingleLinkMessagesReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchSingleLinkMessagesReq* internal_default_instance() {
    return reinterpret_cast<const FetchSingleLinkMessagesReq*>(
               &_FetchSingleLinkMessagesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FetchSingleLinkMessagesReq& a, FetchSingleLinkMessagesReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchSingleLinkMessagesReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchSingleLinkMessagesReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchSingleLinkMessagesReq* New() const final {
    return CreateMaybeMessage<FetchSingleLinkMessagesReq>(nullptr);
  }

  FetchSingleLinkMessagesReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchSingleLinkMessagesReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchSingleLinkMessagesReq& from);
  void MergeFrom(const FetchSingleLinkMessagesReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchSingleLinkMessagesReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.FetchSingleLinkMessagesReq";
  }
  protected:
  explicit FetchSingleLinkMessagesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationIdFieldNumber = 1,
    kFromIndexFieldNumber = 2,
    kToIndexFieldNumber = 3,
  };
  // string conversation_id = 1;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  void set_conversation_id(const std::string& value);
  void set_conversation_id(std::string&& value);
  void set_conversation_id(const char* value);
  void set_conversation_id(const char* value, size_t size);
  std::string* mutable_conversation_id();
  std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_conversation_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_conversation_id(
      std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // int64 from_index = 2;
  void clear_from_index();
  ::PROTOBUF_NAMESPACE_ID::int64 from_index() const;
  void set_from_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_from_index() const;
  void _internal_set_from_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 to_index = 3;
  void clear_to_index();
  ::PROTOBUF_NAMESPACE_ID::int64 to_index() const;
  void set_to_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to_index() const;
  void _internal_set_to_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.FetchSingleLinkMessagesReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class FetchSingleLinkMessagesResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.FetchSingleLinkMessagesResp) */ {
 public:
  inline FetchSingleLinkMessagesResp() : FetchSingleLinkMessagesResp(nullptr) {};
  virtual ~FetchSingleLinkMessagesResp();

  FetchSingleLinkMessagesResp(const FetchSingleLinkMessagesResp& from);
  FetchSingleLinkMessagesResp(FetchSingleLinkMessagesResp&& from) noexcept
    : FetchSingleLinkMessagesResp() {
    *this = ::std::move(from);
  }

  inline FetchSingleLinkMessagesResp& operator=(const FetchSingleLinkMessagesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchSingleLinkMessagesResp& operator=(FetchSingleLinkMessagesResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchSingleLinkMessagesResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchSingleLinkMessagesResp* internal_default_instance() {
    return reinterpret_cast<const FetchSingleLinkMessagesResp*>(
               &_FetchSingleLinkMessagesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FetchSingleLinkMessagesResp& a, FetchSingleLinkMessagesResp& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchSingleLinkMessagesResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchSingleLinkMessagesResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchSingleLinkMessagesResp* New() const final {
    return CreateMaybeMessage<FetchSingleLinkMessagesResp>(nullptr);
  }

  FetchSingleLinkMessagesResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchSingleLinkMessagesResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchSingleLinkMessagesResp& from);
  void MergeFrom(const FetchSingleLinkMessagesResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchSingleLinkMessagesResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.FetchSingleLinkMessagesResp";
  }
  protected:
  explicit FetchSingleLinkMessagesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationMessagesFieldNumber = 1,
  };
  // .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  bool has_conversation_messages() const;
  private:
  bool _internal_has_conversation_messages() const;
  public:
  void clear_conversation_messages();
  const ::roc::im::sdk::net::ConversationMessages& conversation_messages() const;
  ::roc::im::sdk::net::ConversationMessages* release_conversation_messages();
  ::roc::im::sdk::net::ConversationMessages* mutable_conversation_messages();
  void set_allocated_conversation_messages(::roc::im::sdk::net::ConversationMessages* conversation_messages);
  private:
  const ::roc::im::sdk::net::ConversationMessages& _internal_conversation_messages() const;
  ::roc::im::sdk::net::ConversationMessages* _internal_mutable_conversation_messages();
  public:
  void unsafe_arena_set_allocated_conversation_messages(
      ::roc::im::sdk::net::ConversationMessages* conversation_messages);
  ::roc::im::sdk::net::ConversationMessages* unsafe_arena_release_conversation_messages();

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.FetchSingleLinkMessagesResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::roc::im::sdk::net::ConversationMessages* conversation_messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class FetchMixedLinkMessagesReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.FetchMixedLinkMessagesReq) */ {
 public:
  inline FetchMixedLinkMessagesReq() : FetchMixedLinkMessagesReq(nullptr) {};
  virtual ~FetchMixedLinkMessagesReq();

  FetchMixedLinkMessagesReq(const FetchMixedLinkMessagesReq& from);
  FetchMixedLinkMessagesReq(FetchMixedLinkMessagesReq&& from) noexcept
    : FetchMixedLinkMessagesReq() {
    *this = ::std::move(from);
  }

  inline FetchMixedLinkMessagesReq& operator=(const FetchMixedLinkMessagesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchMixedLinkMessagesReq& operator=(FetchMixedLinkMessagesReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchMixedLinkMessagesReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchMixedLinkMessagesReq* internal_default_instance() {
    return reinterpret_cast<const FetchMixedLinkMessagesReq*>(
               &_FetchMixedLinkMessagesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FetchMixedLinkMessagesReq& a, FetchMixedLinkMessagesReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchMixedLinkMessagesReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchMixedLinkMessagesReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchMixedLinkMessagesReq* New() const final {
    return CreateMaybeMessage<FetchMixedLinkMessagesReq>(nullptr);
  }

  FetchMixedLinkMessagesReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchMixedLinkMessagesReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchMixedLinkMessagesReq& from);
  void MergeFrom(const FetchMixedLinkMessagesReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchMixedLinkMessagesReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.FetchMixedLinkMessagesReq";
  }
  protected:
  explicit FetchMixedLinkMessagesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationIdArrFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated string conversation_id_arr = 1;
  int conversation_id_arr_size() const;
  private:
  int _internal_conversation_id_arr_size() const;
  public:
  void clear_conversation_id_arr();
  const std::string& conversation_id_arr(int index) const;
  std::string* mutable_conversation_id_arr(int index);
  void set_conversation_id_arr(int index, const std::string& value);
  void set_conversation_id_arr(int index, std::string&& value);
  void set_conversation_id_arr(int index, const char* value);
  void set_conversation_id_arr(int index, const char* value, size_t size);
  std::string* add_conversation_id_arr();
  void add_conversation_id_arr(const std::string& value);
  void add_conversation_id_arr(std::string&& value);
  void add_conversation_id_arr(const char* value);
  void add_conversation_id_arr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& conversation_id_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_conversation_id_arr();
  private:
  const std::string& _internal_conversation_id_arr(int index) const;
  std::string* _internal_add_conversation_id_arr();
  public:

  // int64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.FetchMixedLinkMessagesReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> conversation_id_arr_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class FetchMixedLinkMessagesResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.FetchMixedLinkMessagesResp) */ {
 public:
  inline FetchMixedLinkMessagesResp() : FetchMixedLinkMessagesResp(nullptr) {};
  virtual ~FetchMixedLinkMessagesResp();

  FetchMixedLinkMessagesResp(const FetchMixedLinkMessagesResp& from);
  FetchMixedLinkMessagesResp(FetchMixedLinkMessagesResp&& from) noexcept
    : FetchMixedLinkMessagesResp() {
    *this = ::std::move(from);
  }

  inline FetchMixedLinkMessagesResp& operator=(const FetchMixedLinkMessagesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchMixedLinkMessagesResp& operator=(FetchMixedLinkMessagesResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchMixedLinkMessagesResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchMixedLinkMessagesResp* internal_default_instance() {
    return reinterpret_cast<const FetchMixedLinkMessagesResp*>(
               &_FetchMixedLinkMessagesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FetchMixedLinkMessagesResp& a, FetchMixedLinkMessagesResp& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchMixedLinkMessagesResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchMixedLinkMessagesResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchMixedLinkMessagesResp* New() const final {
    return CreateMaybeMessage<FetchMixedLinkMessagesResp>(nullptr);
  }

  FetchMixedLinkMessagesResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchMixedLinkMessagesResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchMixedLinkMessagesResp& from);
  void MergeFrom(const FetchMixedLinkMessagesResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchMixedLinkMessagesResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.FetchMixedLinkMessagesResp";
  }
  protected:
  explicit FetchMixedLinkMessagesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationMessagesFieldNumber = 1,
  };
  // repeated .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
  int conversation_messages_size() const;
  private:
  int _internal_conversation_messages_size() const;
  public:
  void clear_conversation_messages();
  ::roc::im::sdk::net::ConversationMessages* mutable_conversation_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::ConversationMessages >*
      mutable_conversation_messages();
  private:
  const ::roc::im::sdk::net::ConversationMessages& _internal_conversation_messages(int index) const;
  ::roc::im::sdk::net::ConversationMessages* _internal_add_conversation_messages();
  public:
  const ::roc::im::sdk::net::ConversationMessages& conversation_messages(int index) const;
  ::roc::im::sdk::net::ConversationMessages* add_conversation_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::ConversationMessages >&
      conversation_messages() const;

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.FetchMixedLinkMessagesResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::ConversationMessages > conversation_messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class SendBatchMessageReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.SendBatchMessageReq) */ {
 public:
  inline SendBatchMessageReq() : SendBatchMessageReq(nullptr) {};
  virtual ~SendBatchMessageReq();

  SendBatchMessageReq(const SendBatchMessageReq& from);
  SendBatchMessageReq(SendBatchMessageReq&& from) noexcept
    : SendBatchMessageReq() {
    *this = ::std::move(from);
  }

  inline SendBatchMessageReq& operator=(const SendBatchMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendBatchMessageReq& operator=(SendBatchMessageReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendBatchMessageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendBatchMessageReq* internal_default_instance() {
    return reinterpret_cast<const SendBatchMessageReq*>(
               &_SendBatchMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SendBatchMessageReq& a, SendBatchMessageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SendBatchMessageReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendBatchMessageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendBatchMessageReq* New() const final {
    return CreateMaybeMessage<SendBatchMessageReq>(nullptr);
  }

  SendBatchMessageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendBatchMessageReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendBatchMessageReq& from);
  void MergeFrom(const SendBatchMessageReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendBatchMessageReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.SendBatchMessageReq";
  }
  protected:
  explicit SendBatchMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageArrFieldNumber = 1,
  };
  // repeated .roc.im.sdk.net.Message message_arr = 1;
  int message_arr_size() const;
  private:
  int _internal_message_arr_size() const;
  public:
  void clear_message_arr();
  ::roc::im::sdk::net::Message* mutable_message_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >*
      mutable_message_arr();
  private:
  const ::roc::im::sdk::net::Message& _internal_message_arr(int index) const;
  ::roc::im::sdk::net::Message* _internal_add_message_arr();
  public:
  const ::roc::im::sdk::net::Message& message_arr(int index) const;
  ::roc::im::sdk::net::Message* add_message_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >&
      message_arr() const;

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.SendBatchMessageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message > message_arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class SendBatchMessageResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.SendBatchMessageResp) */ {
 public:
  inline SendBatchMessageResp() : SendBatchMessageResp(nullptr) {};
  virtual ~SendBatchMessageResp();

  SendBatchMessageResp(const SendBatchMessageResp& from);
  SendBatchMessageResp(SendBatchMessageResp&& from) noexcept
    : SendBatchMessageResp() {
    *this = ::std::move(from);
  }

  inline SendBatchMessageResp& operator=(const SendBatchMessageResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendBatchMessageResp& operator=(SendBatchMessageResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendBatchMessageResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendBatchMessageResp* internal_default_instance() {
    return reinterpret_cast<const SendBatchMessageResp*>(
               &_SendBatchMessageResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SendBatchMessageResp& a, SendBatchMessageResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SendBatchMessageResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendBatchMessageResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendBatchMessageResp* New() const final {
    return CreateMaybeMessage<SendBatchMessageResp>(nullptr);
  }

  SendBatchMessageResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendBatchMessageResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendBatchMessageResp& from);
  void MergeFrom(const SendBatchMessageResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendBatchMessageResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.SendBatchMessageResp";
  }
  protected:
  explicit SendBatchMessageResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendMessageResponseArrFieldNumber = 1,
  };
  // repeated .roc.im.sdk.net.SendBatchMessageResp send_message_response_arr = 1;
  int send_message_response_arr_size() const;
  private:
  int _internal_send_message_response_arr_size() const;
  public:
  void clear_send_message_response_arr();
  ::roc::im::sdk::net::SendBatchMessageResp* mutable_send_message_response_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::SendBatchMessageResp >*
      mutable_send_message_response_arr();
  private:
  const ::roc::im::sdk::net::SendBatchMessageResp& _internal_send_message_response_arr(int index) const;
  ::roc::im::sdk::net::SendBatchMessageResp* _internal_add_send_message_response_arr();
  public:
  const ::roc::im::sdk::net::SendBatchMessageResp& send_message_response_arr(int index) const;
  ::roc::im::sdk::net::SendBatchMessageResp* add_send_message_response_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::SendBatchMessageResp >&
      send_message_response_arr() const;

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.SendBatchMessageResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::SendBatchMessageResp > send_message_response_arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class PushMessages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.PushMessages) */ {
 public:
  inline PushMessages() : PushMessages(nullptr) {};
  virtual ~PushMessages();

  PushMessages(const PushMessages& from);
  PushMessages(PushMessages&& from) noexcept
    : PushMessages() {
    *this = ::std::move(from);
  }

  inline PushMessages& operator=(const PushMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushMessages& operator=(PushMessages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushMessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushMessages* internal_default_instance() {
    return reinterpret_cast<const PushMessages*>(
               &_PushMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PushMessages& a, PushMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(PushMessages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushMessages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushMessages* New() const final {
    return CreateMaybeMessage<PushMessages>(nullptr);
  }

  PushMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushMessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushMessages& from);
  void MergeFrom(const PushMessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushMessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.PushMessages";
  }
  protected:
  explicit PushMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushMessageArrFieldNumber = 1,
  };
  // repeated .roc.im.sdk.net.Message push_message_arr = 1;
  int push_message_arr_size() const;
  private:
  int _internal_push_message_arr_size() const;
  public:
  void clear_push_message_arr();
  ::roc::im::sdk::net::Message* mutable_push_message_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >*
      mutable_push_message_arr();
  private:
  const ::roc::im::sdk::net::Message& _internal_push_message_arr(int index) const;
  ::roc::im::sdk::net::Message* _internal_add_push_message_arr();
  public:
  const ::roc::im::sdk::net::Message& push_message_arr(int index) const;
  ::roc::im::sdk::net::Message* add_push_message_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >&
      push_message_arr() const;

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.PushMessages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message > push_message_arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class RequestBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.RequestBody) */ {
 public:
  inline RequestBody() : RequestBody(nullptr) {};
  virtual ~RequestBody();

  RequestBody(const RequestBody& from);
  RequestBody(RequestBody&& from) noexcept
    : RequestBody() {
    *this = ::std::move(from);
  }

  inline RequestBody& operator=(const RequestBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestBody& operator=(RequestBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestBody* internal_default_instance() {
    return reinterpret_cast<const RequestBody*>(
               &_RequestBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RequestBody& a, RequestBody& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestBody* New() const final {
    return CreateMaybeMessage<RequestBody>(nullptr);
  }

  RequestBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestBody& from);
  void MergeFrom(const RequestBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.RequestBody";
  }
  protected:
  explicit RequestBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kFetchMixedLinkMessagesRequestFieldNumber = 2,
    kFetchSingleLinkMessagesRequestFieldNumber = 3,
    kSendBatchMessagesRequestFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .roc.im.sdk.net.FetchMixedLinkMessagesReq fetch_mixed_link_messages_request = 2;
  bool has_fetch_mixed_link_messages_request() const;
  private:
  bool _internal_has_fetch_mixed_link_messages_request() const;
  public:
  void clear_fetch_mixed_link_messages_request();
  const ::roc::im::sdk::net::FetchMixedLinkMessagesReq& fetch_mixed_link_messages_request() const;
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* release_fetch_mixed_link_messages_request();
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* mutable_fetch_mixed_link_messages_request();
  void set_allocated_fetch_mixed_link_messages_request(::roc::im::sdk::net::FetchMixedLinkMessagesReq* fetch_mixed_link_messages_request);
  private:
  const ::roc::im::sdk::net::FetchMixedLinkMessagesReq& _internal_fetch_mixed_link_messages_request() const;
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* _internal_mutable_fetch_mixed_link_messages_request();
  public:
  void unsafe_arena_set_allocated_fetch_mixed_link_messages_request(
      ::roc::im::sdk::net::FetchMixedLinkMessagesReq* fetch_mixed_link_messages_request);
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* unsafe_arena_release_fetch_mixed_link_messages_request();

  // .roc.im.sdk.net.FetchSingleLinkMessagesReq fetch_single_link_messages_request = 3;
  bool has_fetch_single_link_messages_request() const;
  private:
  bool _internal_has_fetch_single_link_messages_request() const;
  public:
  void clear_fetch_single_link_messages_request();
  const ::roc::im::sdk::net::FetchSingleLinkMessagesReq& fetch_single_link_messages_request() const;
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* release_fetch_single_link_messages_request();
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* mutable_fetch_single_link_messages_request();
  void set_allocated_fetch_single_link_messages_request(::roc::im::sdk::net::FetchSingleLinkMessagesReq* fetch_single_link_messages_request);
  private:
  const ::roc::im::sdk::net::FetchSingleLinkMessagesReq& _internal_fetch_single_link_messages_request() const;
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* _internal_mutable_fetch_single_link_messages_request();
  public:
  void unsafe_arena_set_allocated_fetch_single_link_messages_request(
      ::roc::im::sdk::net::FetchSingleLinkMessagesReq* fetch_single_link_messages_request);
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* unsafe_arena_release_fetch_single_link_messages_request();

  // .roc.im.sdk.net.SendBatchMessageReq send_batch_messages_request = 4;
  bool has_send_batch_messages_request() const;
  private:
  bool _internal_has_send_batch_messages_request() const;
  public:
  void clear_send_batch_messages_request();
  const ::roc::im::sdk::net::SendBatchMessageReq& send_batch_messages_request() const;
  ::roc::im::sdk::net::SendBatchMessageReq* release_send_batch_messages_request();
  ::roc::im::sdk::net::SendBatchMessageReq* mutable_send_batch_messages_request();
  void set_allocated_send_batch_messages_request(::roc::im::sdk::net::SendBatchMessageReq* send_batch_messages_request);
  private:
  const ::roc::im::sdk::net::SendBatchMessageReq& _internal_send_batch_messages_request() const;
  ::roc::im::sdk::net::SendBatchMessageReq* _internal_mutable_send_batch_messages_request();
  public:
  void unsafe_arena_set_allocated_send_batch_messages_request(
      ::roc::im::sdk::net::SendBatchMessageReq* send_batch_messages_request);
  ::roc::im::sdk::net::SendBatchMessageReq* unsafe_arena_release_send_batch_messages_request();

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.RequestBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* fetch_mixed_link_messages_request_;
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* fetch_single_link_messages_request_;
  ::roc::im::sdk::net::SendBatchMessageReq* send_batch_messages_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// -------------------------------------------------------------------

class ResponseBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:roc.im.sdk.net.ResponseBody) */ {
 public:
  inline ResponseBody() : ResponseBody(nullptr) {};
  virtual ~ResponseBody();

  ResponseBody(const ResponseBody& from);
  ResponseBody(ResponseBody&& from) noexcept
    : ResponseBody() {
    *this = ::std::move(from);
  }

  inline ResponseBody& operator=(const ResponseBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseBody& operator=(ResponseBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseBody* internal_default_instance() {
    return reinterpret_cast<const ResponseBody*>(
               &_ResponseBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ResponseBody& a, ResponseBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseBody* New() const final {
    return CreateMaybeMessage<ResponseBody>(nullptr);
  }

  ResponseBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseBody& from);
  void MergeFrom(const ResponseBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "roc.im.sdk.net.ResponseBody";
  }
  protected:
  explicit ResponseBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_im_2eproto);
    return ::descriptor_table_im_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseIdFieldNumber = 1,
    kFetchMixedLinkMessagesResponseFieldNumber = 2,
    kFetchSingleLinkMessagesResponseFieldNumber = 3,
    kSendBatchMessagesResponseFieldNumber = 4,
    kPushMessageFieldNumber = 5,
  };
  // string response_id = 1;
  void clear_response_id();
  const std::string& response_id() const;
  void set_response_id(const std::string& value);
  void set_response_id(std::string&& value);
  void set_response_id(const char* value);
  void set_response_id(const char* value, size_t size);
  std::string* mutable_response_id();
  std::string* release_response_id();
  void set_allocated_response_id(std::string* response_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_response_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_response_id(
      std::string* response_id);
  private:
  const std::string& _internal_response_id() const;
  void _internal_set_response_id(const std::string& value);
  std::string* _internal_mutable_response_id();
  public:

  // .roc.im.sdk.net.FetchMixedLinkMessagesResp fetch_mixed_link_messages_response = 2;
  bool has_fetch_mixed_link_messages_response() const;
  private:
  bool _internal_has_fetch_mixed_link_messages_response() const;
  public:
  void clear_fetch_mixed_link_messages_response();
  const ::roc::im::sdk::net::FetchMixedLinkMessagesResp& fetch_mixed_link_messages_response() const;
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* release_fetch_mixed_link_messages_response();
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* mutable_fetch_mixed_link_messages_response();
  void set_allocated_fetch_mixed_link_messages_response(::roc::im::sdk::net::FetchMixedLinkMessagesResp* fetch_mixed_link_messages_response);
  private:
  const ::roc::im::sdk::net::FetchMixedLinkMessagesResp& _internal_fetch_mixed_link_messages_response() const;
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* _internal_mutable_fetch_mixed_link_messages_response();
  public:
  void unsafe_arena_set_allocated_fetch_mixed_link_messages_response(
      ::roc::im::sdk::net::FetchMixedLinkMessagesResp* fetch_mixed_link_messages_response);
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* unsafe_arena_release_fetch_mixed_link_messages_response();

  // .roc.im.sdk.net.FetchSingleLinkMessagesResp fetch_single_link_messages_response = 3;
  bool has_fetch_single_link_messages_response() const;
  private:
  bool _internal_has_fetch_single_link_messages_response() const;
  public:
  void clear_fetch_single_link_messages_response();
  const ::roc::im::sdk::net::FetchSingleLinkMessagesResp& fetch_single_link_messages_response() const;
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* release_fetch_single_link_messages_response();
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* mutable_fetch_single_link_messages_response();
  void set_allocated_fetch_single_link_messages_response(::roc::im::sdk::net::FetchSingleLinkMessagesResp* fetch_single_link_messages_response);
  private:
  const ::roc::im::sdk::net::FetchSingleLinkMessagesResp& _internal_fetch_single_link_messages_response() const;
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* _internal_mutable_fetch_single_link_messages_response();
  public:
  void unsafe_arena_set_allocated_fetch_single_link_messages_response(
      ::roc::im::sdk::net::FetchSingleLinkMessagesResp* fetch_single_link_messages_response);
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* unsafe_arena_release_fetch_single_link_messages_response();

  // .roc.im.sdk.net.SendBatchMessageResp send_batch_messages_response = 4;
  bool has_send_batch_messages_response() const;
  private:
  bool _internal_has_send_batch_messages_response() const;
  public:
  void clear_send_batch_messages_response();
  const ::roc::im::sdk::net::SendBatchMessageResp& send_batch_messages_response() const;
  ::roc::im::sdk::net::SendBatchMessageResp* release_send_batch_messages_response();
  ::roc::im::sdk::net::SendBatchMessageResp* mutable_send_batch_messages_response();
  void set_allocated_send_batch_messages_response(::roc::im::sdk::net::SendBatchMessageResp* send_batch_messages_response);
  private:
  const ::roc::im::sdk::net::SendBatchMessageResp& _internal_send_batch_messages_response() const;
  ::roc::im::sdk::net::SendBatchMessageResp* _internal_mutable_send_batch_messages_response();
  public:
  void unsafe_arena_set_allocated_send_batch_messages_response(
      ::roc::im::sdk::net::SendBatchMessageResp* send_batch_messages_response);
  ::roc::im::sdk::net::SendBatchMessageResp* unsafe_arena_release_send_batch_messages_response();

  // .roc.im.sdk.net.PushMessages push_message = 5;
  bool has_push_message() const;
  private:
  bool _internal_has_push_message() const;
  public:
  void clear_push_message();
  const ::roc::im::sdk::net::PushMessages& push_message() const;
  ::roc::im::sdk::net::PushMessages* release_push_message();
  ::roc::im::sdk::net::PushMessages* mutable_push_message();
  void set_allocated_push_message(::roc::im::sdk::net::PushMessages* push_message);
  private:
  const ::roc::im::sdk::net::PushMessages& _internal_push_message() const;
  ::roc::im::sdk::net::PushMessages* _internal_mutable_push_message();
  public:
  void unsafe_arena_set_allocated_push_message(
      ::roc::im::sdk::net::PushMessages* push_message);
  ::roc::im::sdk::net::PushMessages* unsafe_arena_release_push_message();

  // @@protoc_insertion_point(class_scope:roc.im.sdk.net.ResponseBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_id_;
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* fetch_mixed_link_messages_response_;
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* fetch_single_link_messages_response_;
  ::roc::im::sdk::net::SendBatchMessageResp* send_batch_messages_response_;
  ::roc::im::sdk::net::PushMessages* push_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_im_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Conversation

// string convertsion_id = 1;
inline void Conversation::clear_convertsion_id() {
  convertsion_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Conversation::convertsion_id() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Conversation.convertsion_id)
  return _internal_convertsion_id();
}
inline void Conversation::set_convertsion_id(const std::string& value) {
  _internal_set_convertsion_id(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Conversation.convertsion_id)
}
inline std::string* Conversation::mutable_convertsion_id() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.Conversation.convertsion_id)
  return _internal_mutable_convertsion_id();
}
inline const std::string& Conversation::_internal_convertsion_id() const {
  return convertsion_id_.Get();
}
inline void Conversation::_internal_set_convertsion_id(const std::string& value) {
  
  convertsion_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Conversation::set_convertsion_id(std::string&& value) {
  
  convertsion_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:roc.im.sdk.net.Conversation.convertsion_id)
}
inline void Conversation::set_convertsion_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  convertsion_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.Conversation.convertsion_id)
}
inline void Conversation::set_convertsion_id(const char* value,
    size_t size) {
  
  convertsion_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.Conversation.convertsion_id)
}
inline std::string* Conversation::_internal_mutable_convertsion_id() {
  
  return convertsion_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Conversation::release_convertsion_id() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.Conversation.convertsion_id)
  return convertsion_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Conversation::set_allocated_convertsion_id(std::string* convertsion_id) {
  if (convertsion_id != nullptr) {
    
  } else {
    
  }
  convertsion_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), convertsion_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.Conversation.convertsion_id)
}
inline std::string* Conversation::unsafe_arena_release_convertsion_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:roc.im.sdk.net.Conversation.convertsion_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return convertsion_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Conversation::unsafe_arena_set_allocated_convertsion_id(
    std::string* convertsion_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (convertsion_id != nullptr) {
    
  } else {
    
  }
  convertsion_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      convertsion_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.Conversation.convertsion_id)
}

// string owner_id = 2;
inline void Conversation::clear_owner_id() {
  owner_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Conversation::owner_id() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Conversation.owner_id)
  return _internal_owner_id();
}
inline void Conversation::set_owner_id(const std::string& value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Conversation.owner_id)
}
inline std::string* Conversation::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.Conversation.owner_id)
  return _internal_mutable_owner_id();
}
inline const std::string& Conversation::_internal_owner_id() const {
  return owner_id_.Get();
}
inline void Conversation::_internal_set_owner_id(const std::string& value) {
  
  owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Conversation::set_owner_id(std::string&& value) {
  
  owner_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:roc.im.sdk.net.Conversation.owner_id)
}
inline void Conversation::set_owner_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.Conversation.owner_id)
}
inline void Conversation::set_owner_id(const char* value,
    size_t size) {
  
  owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.Conversation.owner_id)
}
inline std::string* Conversation::_internal_mutable_owner_id() {
  
  return owner_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Conversation::release_owner_id() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.Conversation.owner_id)
  return owner_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Conversation::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    
  } else {
    
  }
  owner_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.Conversation.owner_id)
}
inline std::string* Conversation::unsafe_arena_release_owner_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:roc.im.sdk.net.Conversation.owner_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return owner_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Conversation::unsafe_arena_set_allocated_owner_id(
    std::string* owner_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (owner_id != nullptr) {
    
  } else {
    
  }
  owner_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      owner_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.Conversation.owner_id)
}

// map<string, string> ext = 3;
inline int Conversation::_internal_ext_size() const {
  return ext_.size();
}
inline int Conversation::ext_size() const {
  return _internal_ext_size();
}
inline void Conversation::clear_ext() {
  ext_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Conversation::_internal_ext() const {
  return ext_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Conversation::ext() const {
  // @@protoc_insertion_point(field_map:roc.im.sdk.net.Conversation.ext)
  return _internal_ext();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Conversation::_internal_mutable_ext() {
  return ext_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Conversation::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:roc.im.sdk.net.Conversation.ext)
  return _internal_mutable_ext();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Message

// string message_id = 1;
inline void Message::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::message_id() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Message.message_id)
  return _internal_message_id();
}
inline void Message::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Message.message_id)
}
inline std::string* Message::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.Message.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& Message::_internal_message_id() const {
  return message_id_.Get();
}
inline void Message::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_message_id(std::string&& value) {
  
  message_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:roc.im.sdk.net.Message.message_id)
}
inline void Message::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.Message.message_id)
}
inline void Message::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.Message.message_id)
}
inline std::string* Message::_internal_mutable_message_id() {
  
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_message_id() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.Message.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.Message.message_id)
}
inline std::string* Message::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:roc.im.sdk.net.Message.message_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message::unsafe_arena_set_allocated_message_id(
    std::string* message_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.Message.message_id)
}

// bytes content = 2;
inline void Message::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Message.content)
  return _internal_content();
}
inline void Message::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Message.content)
}
inline std::string* Message::mutable_content() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.Message.content)
  return _internal_mutable_content();
}
inline const std::string& Message::_internal_content() const {
  return content_.Get();
}
inline void Message::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:roc.im.sdk.net.Message.content)
}
inline void Message::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.Message.content)
}
inline void Message::set_content(const void* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.Message.content)
}
inline std::string* Message::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.Message.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.Message.content)
}
inline std::string* Message::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:roc.im.sdk.net.Message.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.Message.content)
}

// map<string, string> ext = 3;
inline int Message::_internal_ext_size() const {
  return ext_.size();
}
inline int Message::ext_size() const {
  return _internal_ext_size();
}
inline void Message::clear_ext() {
  ext_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Message::_internal_ext() const {
  return ext_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Message::ext() const {
  // @@protoc_insertion_point(field_map:roc.im.sdk.net.Message.ext)
  return _internal_ext();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Message::_internal_mutable_ext() {
  return ext_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Message::mutable_ext() {
  // @@protoc_insertion_point(field_mutable_map:roc.im.sdk.net.Message.ext)
  return _internal_mutable_ext();
}

// string sender_id = 4;
inline void Message::clear_sender_id() {
  sender_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::sender_id() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Message.sender_id)
  return _internal_sender_id();
}
inline void Message::set_sender_id(const std::string& value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Message.sender_id)
}
inline std::string* Message::mutable_sender_id() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.Message.sender_id)
  return _internal_mutable_sender_id();
}
inline const std::string& Message::_internal_sender_id() const {
  return sender_id_.Get();
}
inline void Message::_internal_set_sender_id(const std::string& value) {
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_sender_id(std::string&& value) {
  
  sender_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:roc.im.sdk.net.Message.sender_id)
}
inline void Message::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.Message.sender_id)
}
inline void Message::set_sender_id(const char* value,
    size_t size) {
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.Message.sender_id)
}
inline std::string* Message::_internal_mutable_sender_id() {
  
  return sender_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_sender_id() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.Message.sender_id)
  return sender_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  sender_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.Message.sender_id)
}
inline std::string* Message::unsafe_arena_release_sender_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:roc.im.sdk.net.Message.sender_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sender_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message::unsafe_arena_set_allocated_sender_id(
    std::string* sender_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sender_id != nullptr) {
    
  } else {
    
  }
  sender_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sender_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.Message.sender_id)
}

// string convertsion_id = 5;
inline void Message::clear_convertsion_id() {
  convertsion_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::convertsion_id() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Message.convertsion_id)
  return _internal_convertsion_id();
}
inline void Message::set_convertsion_id(const std::string& value) {
  _internal_set_convertsion_id(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Message.convertsion_id)
}
inline std::string* Message::mutable_convertsion_id() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.Message.convertsion_id)
  return _internal_mutable_convertsion_id();
}
inline const std::string& Message::_internal_convertsion_id() const {
  return convertsion_id_.Get();
}
inline void Message::_internal_set_convertsion_id(const std::string& value) {
  
  convertsion_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_convertsion_id(std::string&& value) {
  
  convertsion_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:roc.im.sdk.net.Message.convertsion_id)
}
inline void Message::set_convertsion_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  convertsion_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.Message.convertsion_id)
}
inline void Message::set_convertsion_id(const char* value,
    size_t size) {
  
  convertsion_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.Message.convertsion_id)
}
inline std::string* Message::_internal_mutable_convertsion_id() {
  
  return convertsion_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_convertsion_id() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.Message.convertsion_id)
  return convertsion_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_convertsion_id(std::string* convertsion_id) {
  if (convertsion_id != nullptr) {
    
  } else {
    
  }
  convertsion_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), convertsion_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.Message.convertsion_id)
}
inline std::string* Message::unsafe_arena_release_convertsion_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:roc.im.sdk.net.Message.convertsion_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return convertsion_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message::unsafe_arena_set_allocated_convertsion_id(
    std::string* convertsion_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (convertsion_id != nullptr) {
    
  } else {
    
  }
  convertsion_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      convertsion_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.Message.convertsion_id)
}

// int64 message_type = 6;
inline void Message::clear_message_type() {
  message_type_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message::_internal_message_type() const {
  return message_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message::message_type() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Message.message_type)
  return _internal_message_type();
}
inline void Message::_internal_set_message_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  message_type_ = value;
}
inline void Message::set_message_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Message.message_type)
}

// int64 index = 7;
inline void Message::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message::index() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.Message.index)
  return _internal_index();
}
inline void Message::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  index_ = value;
}
inline void Message::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.Message.index)
}

// -------------------------------------------------------------------

// ConversationMessages

// string conversation_id = 1;
inline void ConversationMessages::clear_conversation_id() {
  conversation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConversationMessages::conversation_id() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ConversationMessages.conversation_id)
  return _internal_conversation_id();
}
inline void ConversationMessages::set_conversation_id(const std::string& value) {
  _internal_set_conversation_id(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.ConversationMessages.conversation_id)
}
inline std::string* ConversationMessages::mutable_conversation_id() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ConversationMessages.conversation_id)
  return _internal_mutable_conversation_id();
}
inline const std::string& ConversationMessages::_internal_conversation_id() const {
  return conversation_id_.Get();
}
inline void ConversationMessages::_internal_set_conversation_id(const std::string& value) {
  
  conversation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConversationMessages::set_conversation_id(std::string&& value) {
  
  conversation_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:roc.im.sdk.net.ConversationMessages.conversation_id)
}
inline void ConversationMessages::set_conversation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  conversation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.ConversationMessages.conversation_id)
}
inline void ConversationMessages::set_conversation_id(const char* value,
    size_t size) {
  
  conversation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.ConversationMessages.conversation_id)
}
inline std::string* ConversationMessages::_internal_mutable_conversation_id() {
  
  return conversation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConversationMessages::release_conversation_id() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ConversationMessages.conversation_id)
  return conversation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConversationMessages::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  conversation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conversation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ConversationMessages.conversation_id)
}
inline std::string* ConversationMessages::unsafe_arena_release_conversation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:roc.im.sdk.net.ConversationMessages.conversation_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return conversation_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConversationMessages::unsafe_arena_set_allocated_conversation_id(
    std::string* conversation_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  conversation_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      conversation_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.ConversationMessages.conversation_id)
}

// repeated .roc.im.sdk.net.Message message_arr = 2;
inline int ConversationMessages::_internal_message_arr_size() const {
  return message_arr_.size();
}
inline int ConversationMessages::message_arr_size() const {
  return _internal_message_arr_size();
}
inline void ConversationMessages::clear_message_arr() {
  message_arr_.Clear();
}
inline ::roc::im::sdk::net::Message* ConversationMessages::mutable_message_arr(int index) {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ConversationMessages.message_arr)
  return message_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >*
ConversationMessages::mutable_message_arr() {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.ConversationMessages.message_arr)
  return &message_arr_;
}
inline const ::roc::im::sdk::net::Message& ConversationMessages::_internal_message_arr(int index) const {
  return message_arr_.Get(index);
}
inline const ::roc::im::sdk::net::Message& ConversationMessages::message_arr(int index) const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ConversationMessages.message_arr)
  return _internal_message_arr(index);
}
inline ::roc::im::sdk::net::Message* ConversationMessages::_internal_add_message_arr() {
  return message_arr_.Add();
}
inline ::roc::im::sdk::net::Message* ConversationMessages::add_message_arr() {
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.ConversationMessages.message_arr)
  return _internal_add_message_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >&
ConversationMessages::message_arr() const {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.ConversationMessages.message_arr)
  return message_arr_;
}

// -------------------------------------------------------------------

// FetchSingleLinkMessagesReq

// string conversation_id = 1;
inline void FetchSingleLinkMessagesReq::clear_conversation_id() {
  conversation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FetchSingleLinkMessagesReq::conversation_id() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
  return _internal_conversation_id();
}
inline void FetchSingleLinkMessagesReq::set_conversation_id(const std::string& value) {
  _internal_set_conversation_id(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
}
inline std::string* FetchSingleLinkMessagesReq::mutable_conversation_id() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
  return _internal_mutable_conversation_id();
}
inline const std::string& FetchSingleLinkMessagesReq::_internal_conversation_id() const {
  return conversation_id_.Get();
}
inline void FetchSingleLinkMessagesReq::_internal_set_conversation_id(const std::string& value) {
  
  conversation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FetchSingleLinkMessagesReq::set_conversation_id(std::string&& value) {
  
  conversation_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
}
inline void FetchSingleLinkMessagesReq::set_conversation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  conversation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
}
inline void FetchSingleLinkMessagesReq::set_conversation_id(const char* value,
    size_t size) {
  
  conversation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
}
inline std::string* FetchSingleLinkMessagesReq::_internal_mutable_conversation_id() {
  
  return conversation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FetchSingleLinkMessagesReq::release_conversation_id() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
  return conversation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchSingleLinkMessagesReq::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  conversation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conversation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
}
inline std::string* FetchSingleLinkMessagesReq::unsafe_arena_release_conversation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return conversation_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FetchSingleLinkMessagesReq::unsafe_arena_set_allocated_conversation_id(
    std::string* conversation_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  conversation_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      conversation_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.FetchSingleLinkMessagesReq.conversation_id)
}

// int64 from_index = 2;
inline void FetchSingleLinkMessagesReq::clear_from_index() {
  from_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchSingleLinkMessagesReq::_internal_from_index() const {
  return from_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchSingleLinkMessagesReq::from_index() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchSingleLinkMessagesReq.from_index)
  return _internal_from_index();
}
inline void FetchSingleLinkMessagesReq::_internal_set_from_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  from_index_ = value;
}
inline void FetchSingleLinkMessagesReq::set_from_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_from_index(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchSingleLinkMessagesReq.from_index)
}

// int64 to_index = 3;
inline void FetchSingleLinkMessagesReq::clear_to_index() {
  to_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchSingleLinkMessagesReq::_internal_to_index() const {
  return to_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchSingleLinkMessagesReq::to_index() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchSingleLinkMessagesReq.to_index)
  return _internal_to_index();
}
inline void FetchSingleLinkMessagesReq::_internal_set_to_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_index_ = value;
}
inline void FetchSingleLinkMessagesReq::set_to_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to_index(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchSingleLinkMessagesReq.to_index)
}

// -------------------------------------------------------------------

// FetchSingleLinkMessagesResp

// .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
inline bool FetchSingleLinkMessagesResp::_internal_has_conversation_messages() const {
  return this != internal_default_instance() && conversation_messages_ != nullptr;
}
inline bool FetchSingleLinkMessagesResp::has_conversation_messages() const {
  return _internal_has_conversation_messages();
}
inline void FetchSingleLinkMessagesResp::clear_conversation_messages() {
  if (GetArena() == nullptr && conversation_messages_ != nullptr) {
    delete conversation_messages_;
  }
  conversation_messages_ = nullptr;
}
inline const ::roc::im::sdk::net::ConversationMessages& FetchSingleLinkMessagesResp::_internal_conversation_messages() const {
  const ::roc::im::sdk::net::ConversationMessages* p = conversation_messages_;
  return p != nullptr ? *p : *reinterpret_cast<const ::roc::im::sdk::net::ConversationMessages*>(
      &::roc::im::sdk::net::_ConversationMessages_default_instance_);
}
inline const ::roc::im::sdk::net::ConversationMessages& FetchSingleLinkMessagesResp::conversation_messages() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages)
  return _internal_conversation_messages();
}
inline void FetchSingleLinkMessagesResp::unsafe_arena_set_allocated_conversation_messages(
    ::roc::im::sdk::net::ConversationMessages* conversation_messages) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conversation_messages_);
  }
  conversation_messages_ = conversation_messages;
  if (conversation_messages) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages)
}
inline ::roc::im::sdk::net::ConversationMessages* FetchSingleLinkMessagesResp::release_conversation_messages() {
  auto temp = unsafe_arena_release_conversation_messages();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::roc::im::sdk::net::ConversationMessages* FetchSingleLinkMessagesResp::unsafe_arena_release_conversation_messages() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages)
  
  ::roc::im::sdk::net::ConversationMessages* temp = conversation_messages_;
  conversation_messages_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::ConversationMessages* FetchSingleLinkMessagesResp::_internal_mutable_conversation_messages() {
  
  if (conversation_messages_ == nullptr) {
    auto* p = CreateMaybeMessage<::roc::im::sdk::net::ConversationMessages>(GetArena());
    conversation_messages_ = p;
  }
  return conversation_messages_;
}
inline ::roc::im::sdk::net::ConversationMessages* FetchSingleLinkMessagesResp::mutable_conversation_messages() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages)
  return _internal_mutable_conversation_messages();
}
inline void FetchSingleLinkMessagesResp::set_allocated_conversation_messages(::roc::im::sdk::net::ConversationMessages* conversation_messages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conversation_messages_;
  }
  if (conversation_messages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conversation_messages);
    if (message_arena != submessage_arena) {
      conversation_messages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation_messages, submessage_arena);
    }
    
  } else {
    
  }
  conversation_messages_ = conversation_messages;
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.FetchSingleLinkMessagesResp.conversation_messages)
}

// -------------------------------------------------------------------

// FetchMixedLinkMessagesReq

// repeated string conversation_id_arr = 1;
inline int FetchMixedLinkMessagesReq::_internal_conversation_id_arr_size() const {
  return conversation_id_arr_.size();
}
inline int FetchMixedLinkMessagesReq::conversation_id_arr_size() const {
  return _internal_conversation_id_arr_size();
}
inline void FetchMixedLinkMessagesReq::clear_conversation_id_arr() {
  conversation_id_arr_.Clear();
}
inline std::string* FetchMixedLinkMessagesReq::add_conversation_id_arr() {
  // @@protoc_insertion_point(field_add_mutable:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  return _internal_add_conversation_id_arr();
}
inline const std::string& FetchMixedLinkMessagesReq::_internal_conversation_id_arr(int index) const {
  return conversation_id_arr_.Get(index);
}
inline const std::string& FetchMixedLinkMessagesReq::conversation_id_arr(int index) const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  return _internal_conversation_id_arr(index);
}
inline std::string* FetchMixedLinkMessagesReq::mutable_conversation_id_arr(int index) {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  return conversation_id_arr_.Mutable(index);
}
inline void FetchMixedLinkMessagesReq::set_conversation_id_arr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  conversation_id_arr_.Mutable(index)->assign(value);
}
inline void FetchMixedLinkMessagesReq::set_conversation_id_arr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  conversation_id_arr_.Mutable(index)->assign(std::move(value));
}
inline void FetchMixedLinkMessagesReq::set_conversation_id_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  conversation_id_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
}
inline void FetchMixedLinkMessagesReq::set_conversation_id_arr(int index, const char* value, size_t size) {
  conversation_id_arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
}
inline std::string* FetchMixedLinkMessagesReq::_internal_add_conversation_id_arr() {
  return conversation_id_arr_.Add();
}
inline void FetchMixedLinkMessagesReq::add_conversation_id_arr(const std::string& value) {
  conversation_id_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
}
inline void FetchMixedLinkMessagesReq::add_conversation_id_arr(std::string&& value) {
  conversation_id_arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
}
inline void FetchMixedLinkMessagesReq::add_conversation_id_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  conversation_id_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
}
inline void FetchMixedLinkMessagesReq::add_conversation_id_arr(const char* value, size_t size) {
  conversation_id_arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FetchMixedLinkMessagesReq::conversation_id_arr() const {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  return conversation_id_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FetchMixedLinkMessagesReq::mutable_conversation_id_arr() {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.FetchMixedLinkMessagesReq.conversation_id_arr)
  return &conversation_id_arr_;
}

// int64 count = 2;
inline void FetchMixedLinkMessagesReq::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchMixedLinkMessagesReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FetchMixedLinkMessagesReq::count() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchMixedLinkMessagesReq.count)
  return _internal_count();
}
inline void FetchMixedLinkMessagesReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void FetchMixedLinkMessagesReq::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.FetchMixedLinkMessagesReq.count)
}

// -------------------------------------------------------------------

// FetchMixedLinkMessagesResp

// repeated .roc.im.sdk.net.ConversationMessages conversation_messages = 1;
inline int FetchMixedLinkMessagesResp::_internal_conversation_messages_size() const {
  return conversation_messages_.size();
}
inline int FetchMixedLinkMessagesResp::conversation_messages_size() const {
  return _internal_conversation_messages_size();
}
inline void FetchMixedLinkMessagesResp::clear_conversation_messages() {
  conversation_messages_.Clear();
}
inline ::roc::im::sdk::net::ConversationMessages* FetchMixedLinkMessagesResp::mutable_conversation_messages(int index) {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages)
  return conversation_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::ConversationMessages >*
FetchMixedLinkMessagesResp::mutable_conversation_messages() {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages)
  return &conversation_messages_;
}
inline const ::roc::im::sdk::net::ConversationMessages& FetchMixedLinkMessagesResp::_internal_conversation_messages(int index) const {
  return conversation_messages_.Get(index);
}
inline const ::roc::im::sdk::net::ConversationMessages& FetchMixedLinkMessagesResp::conversation_messages(int index) const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages)
  return _internal_conversation_messages(index);
}
inline ::roc::im::sdk::net::ConversationMessages* FetchMixedLinkMessagesResp::_internal_add_conversation_messages() {
  return conversation_messages_.Add();
}
inline ::roc::im::sdk::net::ConversationMessages* FetchMixedLinkMessagesResp::add_conversation_messages() {
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages)
  return _internal_add_conversation_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::ConversationMessages >&
FetchMixedLinkMessagesResp::conversation_messages() const {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.FetchMixedLinkMessagesResp.conversation_messages)
  return conversation_messages_;
}

// -------------------------------------------------------------------

// SendBatchMessageReq

// repeated .roc.im.sdk.net.Message message_arr = 1;
inline int SendBatchMessageReq::_internal_message_arr_size() const {
  return message_arr_.size();
}
inline int SendBatchMessageReq::message_arr_size() const {
  return _internal_message_arr_size();
}
inline void SendBatchMessageReq::clear_message_arr() {
  message_arr_.Clear();
}
inline ::roc::im::sdk::net::Message* SendBatchMessageReq::mutable_message_arr(int index) {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.SendBatchMessageReq.message_arr)
  return message_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >*
SendBatchMessageReq::mutable_message_arr() {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.SendBatchMessageReq.message_arr)
  return &message_arr_;
}
inline const ::roc::im::sdk::net::Message& SendBatchMessageReq::_internal_message_arr(int index) const {
  return message_arr_.Get(index);
}
inline const ::roc::im::sdk::net::Message& SendBatchMessageReq::message_arr(int index) const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.SendBatchMessageReq.message_arr)
  return _internal_message_arr(index);
}
inline ::roc::im::sdk::net::Message* SendBatchMessageReq::_internal_add_message_arr() {
  return message_arr_.Add();
}
inline ::roc::im::sdk::net::Message* SendBatchMessageReq::add_message_arr() {
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.SendBatchMessageReq.message_arr)
  return _internal_add_message_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >&
SendBatchMessageReq::message_arr() const {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.SendBatchMessageReq.message_arr)
  return message_arr_;
}

// -------------------------------------------------------------------

// SendBatchMessageResp

// repeated .roc.im.sdk.net.SendBatchMessageResp send_message_response_arr = 1;
inline int SendBatchMessageResp::_internal_send_message_response_arr_size() const {
  return send_message_response_arr_.size();
}
inline int SendBatchMessageResp::send_message_response_arr_size() const {
  return _internal_send_message_response_arr_size();
}
inline void SendBatchMessageResp::clear_send_message_response_arr() {
  send_message_response_arr_.Clear();
}
inline ::roc::im::sdk::net::SendBatchMessageResp* SendBatchMessageResp::mutable_send_message_response_arr(int index) {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr)
  return send_message_response_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::SendBatchMessageResp >*
SendBatchMessageResp::mutable_send_message_response_arr() {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr)
  return &send_message_response_arr_;
}
inline const ::roc::im::sdk::net::SendBatchMessageResp& SendBatchMessageResp::_internal_send_message_response_arr(int index) const {
  return send_message_response_arr_.Get(index);
}
inline const ::roc::im::sdk::net::SendBatchMessageResp& SendBatchMessageResp::send_message_response_arr(int index) const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr)
  return _internal_send_message_response_arr(index);
}
inline ::roc::im::sdk::net::SendBatchMessageResp* SendBatchMessageResp::_internal_add_send_message_response_arr() {
  return send_message_response_arr_.Add();
}
inline ::roc::im::sdk::net::SendBatchMessageResp* SendBatchMessageResp::add_send_message_response_arr() {
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr)
  return _internal_add_send_message_response_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::SendBatchMessageResp >&
SendBatchMessageResp::send_message_response_arr() const {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.SendBatchMessageResp.send_message_response_arr)
  return send_message_response_arr_;
}

// -------------------------------------------------------------------

// PushMessages

// repeated .roc.im.sdk.net.Message push_message_arr = 1;
inline int PushMessages::_internal_push_message_arr_size() const {
  return push_message_arr_.size();
}
inline int PushMessages::push_message_arr_size() const {
  return _internal_push_message_arr_size();
}
inline void PushMessages::clear_push_message_arr() {
  push_message_arr_.Clear();
}
inline ::roc::im::sdk::net::Message* PushMessages::mutable_push_message_arr(int index) {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.PushMessages.push_message_arr)
  return push_message_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >*
PushMessages::mutable_push_message_arr() {
  // @@protoc_insertion_point(field_mutable_list:roc.im.sdk.net.PushMessages.push_message_arr)
  return &push_message_arr_;
}
inline const ::roc::im::sdk::net::Message& PushMessages::_internal_push_message_arr(int index) const {
  return push_message_arr_.Get(index);
}
inline const ::roc::im::sdk::net::Message& PushMessages::push_message_arr(int index) const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.PushMessages.push_message_arr)
  return _internal_push_message_arr(index);
}
inline ::roc::im::sdk::net::Message* PushMessages::_internal_add_push_message_arr() {
  return push_message_arr_.Add();
}
inline ::roc::im::sdk::net::Message* PushMessages::add_push_message_arr() {
  // @@protoc_insertion_point(field_add:roc.im.sdk.net.PushMessages.push_message_arr)
  return _internal_add_push_message_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::roc::im::sdk::net::Message >&
PushMessages::push_message_arr() const {
  // @@protoc_insertion_point(field_list:roc.im.sdk.net.PushMessages.push_message_arr)
  return push_message_arr_;
}

// -------------------------------------------------------------------

// RequestBody

// string request_id = 1;
inline void RequestBody::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestBody::request_id() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.RequestBody.request_id)
  return _internal_request_id();
}
inline void RequestBody::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.RequestBody.request_id)
}
inline std::string* RequestBody::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.RequestBody.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& RequestBody::_internal_request_id() const {
  return request_id_.Get();
}
inline void RequestBody::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestBody::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:roc.im.sdk.net.RequestBody.request_id)
}
inline void RequestBody::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.RequestBody.request_id)
}
inline void RequestBody::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.RequestBody.request_id)
}
inline std::string* RequestBody::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestBody::release_request_id() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.RequestBody.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestBody::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.RequestBody.request_id)
}
inline std::string* RequestBody::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:roc.im.sdk.net.RequestBody.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RequestBody::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.RequestBody.request_id)
}

// .roc.im.sdk.net.FetchMixedLinkMessagesReq fetch_mixed_link_messages_request = 2;
inline bool RequestBody::_internal_has_fetch_mixed_link_messages_request() const {
  return this != internal_default_instance() && fetch_mixed_link_messages_request_ != nullptr;
}
inline bool RequestBody::has_fetch_mixed_link_messages_request() const {
  return _internal_has_fetch_mixed_link_messages_request();
}
inline void RequestBody::clear_fetch_mixed_link_messages_request() {
  if (GetArena() == nullptr && fetch_mixed_link_messages_request_ != nullptr) {
    delete fetch_mixed_link_messages_request_;
  }
  fetch_mixed_link_messages_request_ = nullptr;
}
inline const ::roc::im::sdk::net::FetchMixedLinkMessagesReq& RequestBody::_internal_fetch_mixed_link_messages_request() const {
  const ::roc::im::sdk::net::FetchMixedLinkMessagesReq* p = fetch_mixed_link_messages_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::roc::im::sdk::net::FetchMixedLinkMessagesReq*>(
      &::roc::im::sdk::net::_FetchMixedLinkMessagesReq_default_instance_);
}
inline const ::roc::im::sdk::net::FetchMixedLinkMessagesReq& RequestBody::fetch_mixed_link_messages_request() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request)
  return _internal_fetch_mixed_link_messages_request();
}
inline void RequestBody::unsafe_arena_set_allocated_fetch_mixed_link_messages_request(
    ::roc::im::sdk::net::FetchMixedLinkMessagesReq* fetch_mixed_link_messages_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fetch_mixed_link_messages_request_);
  }
  fetch_mixed_link_messages_request_ = fetch_mixed_link_messages_request;
  if (fetch_mixed_link_messages_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request)
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesReq* RequestBody::release_fetch_mixed_link_messages_request() {
  auto temp = unsafe_arena_release_fetch_mixed_link_messages_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesReq* RequestBody::unsafe_arena_release_fetch_mixed_link_messages_request() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request)
  
  ::roc::im::sdk::net::FetchMixedLinkMessagesReq* temp = fetch_mixed_link_messages_request_;
  fetch_mixed_link_messages_request_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesReq* RequestBody::_internal_mutable_fetch_mixed_link_messages_request() {
  
  if (fetch_mixed_link_messages_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::roc::im::sdk::net::FetchMixedLinkMessagesReq>(GetArena());
    fetch_mixed_link_messages_request_ = p;
  }
  return fetch_mixed_link_messages_request_;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesReq* RequestBody::mutable_fetch_mixed_link_messages_request() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request)
  return _internal_mutable_fetch_mixed_link_messages_request();
}
inline void RequestBody::set_allocated_fetch_mixed_link_messages_request(::roc::im::sdk::net::FetchMixedLinkMessagesReq* fetch_mixed_link_messages_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fetch_mixed_link_messages_request_;
  }
  if (fetch_mixed_link_messages_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fetch_mixed_link_messages_request);
    if (message_arena != submessage_arena) {
      fetch_mixed_link_messages_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch_mixed_link_messages_request, submessage_arena);
    }
    
  } else {
    
  }
  fetch_mixed_link_messages_request_ = fetch_mixed_link_messages_request;
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.RequestBody.fetch_mixed_link_messages_request)
}

// .roc.im.sdk.net.FetchSingleLinkMessagesReq fetch_single_link_messages_request = 3;
inline bool RequestBody::_internal_has_fetch_single_link_messages_request() const {
  return this != internal_default_instance() && fetch_single_link_messages_request_ != nullptr;
}
inline bool RequestBody::has_fetch_single_link_messages_request() const {
  return _internal_has_fetch_single_link_messages_request();
}
inline void RequestBody::clear_fetch_single_link_messages_request() {
  if (GetArena() == nullptr && fetch_single_link_messages_request_ != nullptr) {
    delete fetch_single_link_messages_request_;
  }
  fetch_single_link_messages_request_ = nullptr;
}
inline const ::roc::im::sdk::net::FetchSingleLinkMessagesReq& RequestBody::_internal_fetch_single_link_messages_request() const {
  const ::roc::im::sdk::net::FetchSingleLinkMessagesReq* p = fetch_single_link_messages_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::roc::im::sdk::net::FetchSingleLinkMessagesReq*>(
      &::roc::im::sdk::net::_FetchSingleLinkMessagesReq_default_instance_);
}
inline const ::roc::im::sdk::net::FetchSingleLinkMessagesReq& RequestBody::fetch_single_link_messages_request() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.RequestBody.fetch_single_link_messages_request)
  return _internal_fetch_single_link_messages_request();
}
inline void RequestBody::unsafe_arena_set_allocated_fetch_single_link_messages_request(
    ::roc::im::sdk::net::FetchSingleLinkMessagesReq* fetch_single_link_messages_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fetch_single_link_messages_request_);
  }
  fetch_single_link_messages_request_ = fetch_single_link_messages_request;
  if (fetch_single_link_messages_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.RequestBody.fetch_single_link_messages_request)
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesReq* RequestBody::release_fetch_single_link_messages_request() {
  auto temp = unsafe_arena_release_fetch_single_link_messages_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesReq* RequestBody::unsafe_arena_release_fetch_single_link_messages_request() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.RequestBody.fetch_single_link_messages_request)
  
  ::roc::im::sdk::net::FetchSingleLinkMessagesReq* temp = fetch_single_link_messages_request_;
  fetch_single_link_messages_request_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesReq* RequestBody::_internal_mutable_fetch_single_link_messages_request() {
  
  if (fetch_single_link_messages_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::roc::im::sdk::net::FetchSingleLinkMessagesReq>(GetArena());
    fetch_single_link_messages_request_ = p;
  }
  return fetch_single_link_messages_request_;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesReq* RequestBody::mutable_fetch_single_link_messages_request() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.RequestBody.fetch_single_link_messages_request)
  return _internal_mutable_fetch_single_link_messages_request();
}
inline void RequestBody::set_allocated_fetch_single_link_messages_request(::roc::im::sdk::net::FetchSingleLinkMessagesReq* fetch_single_link_messages_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fetch_single_link_messages_request_;
  }
  if (fetch_single_link_messages_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fetch_single_link_messages_request);
    if (message_arena != submessage_arena) {
      fetch_single_link_messages_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch_single_link_messages_request, submessage_arena);
    }
    
  } else {
    
  }
  fetch_single_link_messages_request_ = fetch_single_link_messages_request;
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.RequestBody.fetch_single_link_messages_request)
}

// .roc.im.sdk.net.SendBatchMessageReq send_batch_messages_request = 4;
inline bool RequestBody::_internal_has_send_batch_messages_request() const {
  return this != internal_default_instance() && send_batch_messages_request_ != nullptr;
}
inline bool RequestBody::has_send_batch_messages_request() const {
  return _internal_has_send_batch_messages_request();
}
inline void RequestBody::clear_send_batch_messages_request() {
  if (GetArena() == nullptr && send_batch_messages_request_ != nullptr) {
    delete send_batch_messages_request_;
  }
  send_batch_messages_request_ = nullptr;
}
inline const ::roc::im::sdk::net::SendBatchMessageReq& RequestBody::_internal_send_batch_messages_request() const {
  const ::roc::im::sdk::net::SendBatchMessageReq* p = send_batch_messages_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::roc::im::sdk::net::SendBatchMessageReq*>(
      &::roc::im::sdk::net::_SendBatchMessageReq_default_instance_);
}
inline const ::roc::im::sdk::net::SendBatchMessageReq& RequestBody::send_batch_messages_request() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.RequestBody.send_batch_messages_request)
  return _internal_send_batch_messages_request();
}
inline void RequestBody::unsafe_arena_set_allocated_send_batch_messages_request(
    ::roc::im::sdk::net::SendBatchMessageReq* send_batch_messages_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_batch_messages_request_);
  }
  send_batch_messages_request_ = send_batch_messages_request;
  if (send_batch_messages_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.RequestBody.send_batch_messages_request)
}
inline ::roc::im::sdk::net::SendBatchMessageReq* RequestBody::release_send_batch_messages_request() {
  auto temp = unsafe_arena_release_send_batch_messages_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::roc::im::sdk::net::SendBatchMessageReq* RequestBody::unsafe_arena_release_send_batch_messages_request() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.RequestBody.send_batch_messages_request)
  
  ::roc::im::sdk::net::SendBatchMessageReq* temp = send_batch_messages_request_;
  send_batch_messages_request_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::SendBatchMessageReq* RequestBody::_internal_mutable_send_batch_messages_request() {
  
  if (send_batch_messages_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::roc::im::sdk::net::SendBatchMessageReq>(GetArena());
    send_batch_messages_request_ = p;
  }
  return send_batch_messages_request_;
}
inline ::roc::im::sdk::net::SendBatchMessageReq* RequestBody::mutable_send_batch_messages_request() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.RequestBody.send_batch_messages_request)
  return _internal_mutable_send_batch_messages_request();
}
inline void RequestBody::set_allocated_send_batch_messages_request(::roc::im::sdk::net::SendBatchMessageReq* send_batch_messages_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete send_batch_messages_request_;
  }
  if (send_batch_messages_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(send_batch_messages_request);
    if (message_arena != submessage_arena) {
      send_batch_messages_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_batch_messages_request, submessage_arena);
    }
    
  } else {
    
  }
  send_batch_messages_request_ = send_batch_messages_request;
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.RequestBody.send_batch_messages_request)
}

// -------------------------------------------------------------------

// ResponseBody

// string response_id = 1;
inline void ResponseBody::clear_response_id() {
  response_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResponseBody::response_id() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ResponseBody.response_id)
  return _internal_response_id();
}
inline void ResponseBody::set_response_id(const std::string& value) {
  _internal_set_response_id(value);
  // @@protoc_insertion_point(field_set:roc.im.sdk.net.ResponseBody.response_id)
}
inline std::string* ResponseBody::mutable_response_id() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ResponseBody.response_id)
  return _internal_mutable_response_id();
}
inline const std::string& ResponseBody::_internal_response_id() const {
  return response_id_.Get();
}
inline void ResponseBody::_internal_set_response_id(const std::string& value) {
  
  response_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResponseBody::set_response_id(std::string&& value) {
  
  response_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:roc.im.sdk.net.ResponseBody.response_id)
}
inline void ResponseBody::set_response_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:roc.im.sdk.net.ResponseBody.response_id)
}
inline void ResponseBody::set_response_id(const char* value,
    size_t size) {
  
  response_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:roc.im.sdk.net.ResponseBody.response_id)
}
inline std::string* ResponseBody::_internal_mutable_response_id() {
  
  return response_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResponseBody::release_response_id() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ResponseBody.response_id)
  return response_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseBody::set_allocated_response_id(std::string* response_id) {
  if (response_id != nullptr) {
    
  } else {
    
  }
  response_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ResponseBody.response_id)
}
inline std::string* ResponseBody::unsafe_arena_release_response_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:roc.im.sdk.net.ResponseBody.response_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return response_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResponseBody::unsafe_arena_set_allocated_response_id(
    std::string* response_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (response_id != nullptr) {
    
  } else {
    
  }
  response_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      response_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.ResponseBody.response_id)
}

// .roc.im.sdk.net.FetchMixedLinkMessagesResp fetch_mixed_link_messages_response = 2;
inline bool ResponseBody::_internal_has_fetch_mixed_link_messages_response() const {
  return this != internal_default_instance() && fetch_mixed_link_messages_response_ != nullptr;
}
inline bool ResponseBody::has_fetch_mixed_link_messages_response() const {
  return _internal_has_fetch_mixed_link_messages_response();
}
inline void ResponseBody::clear_fetch_mixed_link_messages_response() {
  if (GetArena() == nullptr && fetch_mixed_link_messages_response_ != nullptr) {
    delete fetch_mixed_link_messages_response_;
  }
  fetch_mixed_link_messages_response_ = nullptr;
}
inline const ::roc::im::sdk::net::FetchMixedLinkMessagesResp& ResponseBody::_internal_fetch_mixed_link_messages_response() const {
  const ::roc::im::sdk::net::FetchMixedLinkMessagesResp* p = fetch_mixed_link_messages_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::roc::im::sdk::net::FetchMixedLinkMessagesResp*>(
      &::roc::im::sdk::net::_FetchMixedLinkMessagesResp_default_instance_);
}
inline const ::roc::im::sdk::net::FetchMixedLinkMessagesResp& ResponseBody::fetch_mixed_link_messages_response() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response)
  return _internal_fetch_mixed_link_messages_response();
}
inline void ResponseBody::unsafe_arena_set_allocated_fetch_mixed_link_messages_response(
    ::roc::im::sdk::net::FetchMixedLinkMessagesResp* fetch_mixed_link_messages_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fetch_mixed_link_messages_response_);
  }
  fetch_mixed_link_messages_response_ = fetch_mixed_link_messages_response;
  if (fetch_mixed_link_messages_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response)
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesResp* ResponseBody::release_fetch_mixed_link_messages_response() {
  auto temp = unsafe_arena_release_fetch_mixed_link_messages_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesResp* ResponseBody::unsafe_arena_release_fetch_mixed_link_messages_response() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response)
  
  ::roc::im::sdk::net::FetchMixedLinkMessagesResp* temp = fetch_mixed_link_messages_response_;
  fetch_mixed_link_messages_response_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesResp* ResponseBody::_internal_mutable_fetch_mixed_link_messages_response() {
  
  if (fetch_mixed_link_messages_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::roc::im::sdk::net::FetchMixedLinkMessagesResp>(GetArena());
    fetch_mixed_link_messages_response_ = p;
  }
  return fetch_mixed_link_messages_response_;
}
inline ::roc::im::sdk::net::FetchMixedLinkMessagesResp* ResponseBody::mutable_fetch_mixed_link_messages_response() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response)
  return _internal_mutable_fetch_mixed_link_messages_response();
}
inline void ResponseBody::set_allocated_fetch_mixed_link_messages_response(::roc::im::sdk::net::FetchMixedLinkMessagesResp* fetch_mixed_link_messages_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fetch_mixed_link_messages_response_;
  }
  if (fetch_mixed_link_messages_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fetch_mixed_link_messages_response);
    if (message_arena != submessage_arena) {
      fetch_mixed_link_messages_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch_mixed_link_messages_response, submessage_arena);
    }
    
  } else {
    
  }
  fetch_mixed_link_messages_response_ = fetch_mixed_link_messages_response;
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ResponseBody.fetch_mixed_link_messages_response)
}

// .roc.im.sdk.net.FetchSingleLinkMessagesResp fetch_single_link_messages_response = 3;
inline bool ResponseBody::_internal_has_fetch_single_link_messages_response() const {
  return this != internal_default_instance() && fetch_single_link_messages_response_ != nullptr;
}
inline bool ResponseBody::has_fetch_single_link_messages_response() const {
  return _internal_has_fetch_single_link_messages_response();
}
inline void ResponseBody::clear_fetch_single_link_messages_response() {
  if (GetArena() == nullptr && fetch_single_link_messages_response_ != nullptr) {
    delete fetch_single_link_messages_response_;
  }
  fetch_single_link_messages_response_ = nullptr;
}
inline const ::roc::im::sdk::net::FetchSingleLinkMessagesResp& ResponseBody::_internal_fetch_single_link_messages_response() const {
  const ::roc::im::sdk::net::FetchSingleLinkMessagesResp* p = fetch_single_link_messages_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::roc::im::sdk::net::FetchSingleLinkMessagesResp*>(
      &::roc::im::sdk::net::_FetchSingleLinkMessagesResp_default_instance_);
}
inline const ::roc::im::sdk::net::FetchSingleLinkMessagesResp& ResponseBody::fetch_single_link_messages_response() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response)
  return _internal_fetch_single_link_messages_response();
}
inline void ResponseBody::unsafe_arena_set_allocated_fetch_single_link_messages_response(
    ::roc::im::sdk::net::FetchSingleLinkMessagesResp* fetch_single_link_messages_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fetch_single_link_messages_response_);
  }
  fetch_single_link_messages_response_ = fetch_single_link_messages_response;
  if (fetch_single_link_messages_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response)
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesResp* ResponseBody::release_fetch_single_link_messages_response() {
  auto temp = unsafe_arena_release_fetch_single_link_messages_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesResp* ResponseBody::unsafe_arena_release_fetch_single_link_messages_response() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response)
  
  ::roc::im::sdk::net::FetchSingleLinkMessagesResp* temp = fetch_single_link_messages_response_;
  fetch_single_link_messages_response_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesResp* ResponseBody::_internal_mutable_fetch_single_link_messages_response() {
  
  if (fetch_single_link_messages_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::roc::im::sdk::net::FetchSingleLinkMessagesResp>(GetArena());
    fetch_single_link_messages_response_ = p;
  }
  return fetch_single_link_messages_response_;
}
inline ::roc::im::sdk::net::FetchSingleLinkMessagesResp* ResponseBody::mutable_fetch_single_link_messages_response() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response)
  return _internal_mutable_fetch_single_link_messages_response();
}
inline void ResponseBody::set_allocated_fetch_single_link_messages_response(::roc::im::sdk::net::FetchSingleLinkMessagesResp* fetch_single_link_messages_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fetch_single_link_messages_response_;
  }
  if (fetch_single_link_messages_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fetch_single_link_messages_response);
    if (message_arena != submessage_arena) {
      fetch_single_link_messages_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fetch_single_link_messages_response, submessage_arena);
    }
    
  } else {
    
  }
  fetch_single_link_messages_response_ = fetch_single_link_messages_response;
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ResponseBody.fetch_single_link_messages_response)
}

// .roc.im.sdk.net.SendBatchMessageResp send_batch_messages_response = 4;
inline bool ResponseBody::_internal_has_send_batch_messages_response() const {
  return this != internal_default_instance() && send_batch_messages_response_ != nullptr;
}
inline bool ResponseBody::has_send_batch_messages_response() const {
  return _internal_has_send_batch_messages_response();
}
inline void ResponseBody::clear_send_batch_messages_response() {
  if (GetArena() == nullptr && send_batch_messages_response_ != nullptr) {
    delete send_batch_messages_response_;
  }
  send_batch_messages_response_ = nullptr;
}
inline const ::roc::im::sdk::net::SendBatchMessageResp& ResponseBody::_internal_send_batch_messages_response() const {
  const ::roc::im::sdk::net::SendBatchMessageResp* p = send_batch_messages_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::roc::im::sdk::net::SendBatchMessageResp*>(
      &::roc::im::sdk::net::_SendBatchMessageResp_default_instance_);
}
inline const ::roc::im::sdk::net::SendBatchMessageResp& ResponseBody::send_batch_messages_response() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ResponseBody.send_batch_messages_response)
  return _internal_send_batch_messages_response();
}
inline void ResponseBody::unsafe_arena_set_allocated_send_batch_messages_response(
    ::roc::im::sdk::net::SendBatchMessageResp* send_batch_messages_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_batch_messages_response_);
  }
  send_batch_messages_response_ = send_batch_messages_response;
  if (send_batch_messages_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.ResponseBody.send_batch_messages_response)
}
inline ::roc::im::sdk::net::SendBatchMessageResp* ResponseBody::release_send_batch_messages_response() {
  auto temp = unsafe_arena_release_send_batch_messages_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::roc::im::sdk::net::SendBatchMessageResp* ResponseBody::unsafe_arena_release_send_batch_messages_response() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ResponseBody.send_batch_messages_response)
  
  ::roc::im::sdk::net::SendBatchMessageResp* temp = send_batch_messages_response_;
  send_batch_messages_response_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::SendBatchMessageResp* ResponseBody::_internal_mutable_send_batch_messages_response() {
  
  if (send_batch_messages_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::roc::im::sdk::net::SendBatchMessageResp>(GetArena());
    send_batch_messages_response_ = p;
  }
  return send_batch_messages_response_;
}
inline ::roc::im::sdk::net::SendBatchMessageResp* ResponseBody::mutable_send_batch_messages_response() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ResponseBody.send_batch_messages_response)
  return _internal_mutable_send_batch_messages_response();
}
inline void ResponseBody::set_allocated_send_batch_messages_response(::roc::im::sdk::net::SendBatchMessageResp* send_batch_messages_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete send_batch_messages_response_;
  }
  if (send_batch_messages_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(send_batch_messages_response);
    if (message_arena != submessage_arena) {
      send_batch_messages_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_batch_messages_response, submessage_arena);
    }
    
  } else {
    
  }
  send_batch_messages_response_ = send_batch_messages_response;
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ResponseBody.send_batch_messages_response)
}

// .roc.im.sdk.net.PushMessages push_message = 5;
inline bool ResponseBody::_internal_has_push_message() const {
  return this != internal_default_instance() && push_message_ != nullptr;
}
inline bool ResponseBody::has_push_message() const {
  return _internal_has_push_message();
}
inline void ResponseBody::clear_push_message() {
  if (GetArena() == nullptr && push_message_ != nullptr) {
    delete push_message_;
  }
  push_message_ = nullptr;
}
inline const ::roc::im::sdk::net::PushMessages& ResponseBody::_internal_push_message() const {
  const ::roc::im::sdk::net::PushMessages* p = push_message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::roc::im::sdk::net::PushMessages*>(
      &::roc::im::sdk::net::_PushMessages_default_instance_);
}
inline const ::roc::im::sdk::net::PushMessages& ResponseBody::push_message() const {
  // @@protoc_insertion_point(field_get:roc.im.sdk.net.ResponseBody.push_message)
  return _internal_push_message();
}
inline void ResponseBody::unsafe_arena_set_allocated_push_message(
    ::roc::im::sdk::net::PushMessages* push_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(push_message_);
  }
  push_message_ = push_message;
  if (push_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:roc.im.sdk.net.ResponseBody.push_message)
}
inline ::roc::im::sdk::net::PushMessages* ResponseBody::release_push_message() {
  auto temp = unsafe_arena_release_push_message();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::roc::im::sdk::net::PushMessages* ResponseBody::unsafe_arena_release_push_message() {
  // @@protoc_insertion_point(field_release:roc.im.sdk.net.ResponseBody.push_message)
  
  ::roc::im::sdk::net::PushMessages* temp = push_message_;
  push_message_ = nullptr;
  return temp;
}
inline ::roc::im::sdk::net::PushMessages* ResponseBody::_internal_mutable_push_message() {
  
  if (push_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::roc::im::sdk::net::PushMessages>(GetArena());
    push_message_ = p;
  }
  return push_message_;
}
inline ::roc::im::sdk::net::PushMessages* ResponseBody::mutable_push_message() {
  // @@protoc_insertion_point(field_mutable:roc.im.sdk.net.ResponseBody.push_message)
  return _internal_mutable_push_message();
}
inline void ResponseBody::set_allocated_push_message(::roc::im::sdk::net::PushMessages* push_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete push_message_;
  }
  if (push_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(push_message);
    if (message_arena != submessage_arena) {
      push_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, push_message, submessage_arena);
    }
    
  } else {
    
  }
  push_message_ = push_message;
  // @@protoc_insertion_point(field_set_allocated:roc.im.sdk.net.ResponseBody.push_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace net
}  // namespace sdk
}  // namespace im
}  // namespace roc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_im_2eproto
